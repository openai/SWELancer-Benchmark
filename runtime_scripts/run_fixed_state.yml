---
- hosts: localhost
  become: true
  tasks: 
    - name: Ensure ISSUE_ID environment variable is set
      assert:
        that:
          - lookup('env', 'ISSUE_ID') is not none
        fail_msg: "The environment variable ISSUE_ID is not set."

    - name: Get the commit ID for the issue
      shell: |
        ISSUE_ID={{ lookup('env', 'ISSUE_ID') }}
        cat /app/tests/issues/$ISSUE_ID/commit_id.txt
      register: commit_id
    
    - name: Read the patch file content
      slurp:
        src: "/app/tests/issues/{{ lookup('env', 'ISSUE_ID') }}/bug_reintroduce.patch"
      register: patch_content
    
    # - name: Reverse broken state patch
    #   shell: |
    #     ISSUE_ID={{ lookup('env', 'ISSUE_ID') }}
    #     patch -p1 -R < /app/tests/issues/$ISSUE_ID/bug_reintroduce.patch
    #   args:
    #     chdir: /app/expensify
    #   ignore_errors: yes
    #   when: 
    #     - (patch_content.content | b64decode | trim) | length > 0
    
    # - name: Install npm dependencies
    #   shell: |
    #     source /root/.nvm/nvm.sh
    #     npm install
    #   args:
    #     chdir: /app/expensify
    #     executable: /bin/bash

    - name: Check if the webpack.dev.ts file exists
      ansible.builtin.stat:
        path: /app/expensify/config/webpack/webpack.dev.ts
      register: webpack_file_ts

    - name: Compile Development Webpack (TypeScript)
      shell: |
        source /root/.nvm/nvm.sh
        npx webpack --config ./config/webpack/webpack.dev.ts
      args:
        chdir: /app/expensify
        executable: /bin/bash
      when: webpack_file_ts.stat.exists
      
    - name: Check if the webpack.dev.js file exists
      ansible.builtin.stat:
        path: /app/expensify/config/webpack/webpack.dev.js
      register: webpack_file_js
      
    - name: Compile Development Webpack (JavaScript)
      shell: |
        source /root/.nvm/nvm.sh
        npx webpack --config ./config/webpack/webpack.dev.js
      args:
        chdir: /app/expensify
        executable: /bin/bash
      when: webpack_file_js.stat.exists

    - name: Ensure ISSUE_ID environment variable is set
      assert:
        that:
          - lookup('env', 'ISSUE_ID') is not none
        fail_msg: "The environment variable ISSUE_ID is not set."
  
    - name: Start npm server in the background
      shell: |
        ISSUE_ID={{ lookup('env', 'ISSUE_ID') }}
        nohup npm run web > /app/tests/logs/$ISSUE_ID/npm_run_dev.log 2>&1 & echo $! > /tmp/npm_run_dev.pid
      args:
        chdir: /app/expensify/
  
    - name: Start mitmdump in the background
      shell: |
        ISSUE_ID={{ lookup('env', 'ISSUE_ID') }}
        nohup mitmdump -s replay.py --ssl-insecure --quiet > /app/tests/logs/$ISSUE_ID/mitmdump.log 2>&1 & echo $! > /tmp/mitmdump.pid
      args:
        chdir: /app/tests/
  
    - name: Wait for services to start
      pause:
        seconds: 10

    - name: Rewrite test file to include required params
      shell: |
        ISSUE_ID={{ lookup('env', 'ISSUE_ID') }}
        python3.12 rewrite_test.py issues/$ISSUE_ID/test.py
      args:
        chdir: /app/tests/
      ignore_errors: yes
      no_log: true
    
    - name: Start ffmpeg recording
      shell: |
        ISSUE_ID={{ lookup('env', 'ISSUE_ID') }}
        nohup ffmpeg -y -f x11grab -video_size 1920x1080 -i :99 -c:v libx264 -preset ultrafast -crf 18 -movflags +faststart attempts/$ISSUE_ID/output.mp4 > logs/$ISSUE_ID/ffmpeg.log 2>&1 & echo $! > /tmp/ffmpeg.pid
      args:
        chdir: /app/tests/

    - name: Run pytest tests
      shell: |
        ISSUE_ID={{ lookup('env', 'ISSUE_ID') }}
        pytest issues/$ISSUE_ID/test.py > logs/$ISSUE_ID/pytest.log 2>&1
      args:
        chdir: /app/tests/
      ignore_errors: yes
    
    - name: Stop ffmpeg recording
      shell: |
        pkill -INT ffmpeg
      args:
        chdir: /app/tests/
      ignore_errors: yes

    - name: Stop npm server
      shell: "kill `cat /tmp/npm_run_dev.pid`"
      ignore_errors: yes
    
    - name: Kill all node processes if they exist
      shell: "pgrep -f node && pkill -f node || true"
      failed_when: false

    - name: Stop mitmdump if exist
      shell: "pgrep -f mitmdump && pkill -f mitmdump || true"
      failed_when: false

    - name: Clean up pid files
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/npm_run_dev.pid
        - /tmp/mitmdump.pid
        - /tmp/ffmpeg.pid
