import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\n"""\nThis test script was written to test the issue #42284.\n\nPre-conditions:\n- Workspace is created.\n- Distance rate configuration is enabled.\n- Only default rate present.\n\nTest Steps:\n- Set a new distance rate.\n- Disable the default rate.\n- Submit a distance expense and check if the default rate is the new rate.\n"""\n\n# Library Imports\nimport pytest\nfrom playwright.async_api import async_playwright, Page\nfrom utils.email_handler import EmailHandler, get_specific_derived_email\nfrom utils.browser import close_browser, start_browser\nfrom utils.trace_cleaner import trace_cleaner\n\n# Constants\nBASE_EMAIL = "lucassandboxturing@gmail.com"\nPASSWORD = ""\nPROXY_OTP = True  # Set to True if you are replaying the recorded test flow\nWS_NAME = f"Lucassandboxturing+42284's"\n\n# Set up browser\nasync def start_browser(headless=True, slow_mo=100, launch_args=None):\n    """\n    Start a browser instance with the given parameters.\n\n    :param headless: Boolean to specify if the browser should run in headless mode.\n    :param slow_mo: Slow down the browser operations by the specified amount of milliseconds.\n    :param launch_args: List of arguments to pass to the browser instance.\n    :return: A tuple of (context, page, playwright).\n    """\n\n    if launch_args is None:\n        launch_args = ["--ignore-certificate-errors", "--disable-web-security", "--disable-features=IsolateOrigins,site-per-process"]\n\n    # Initialize Playwright\n    playwright = await async_playwright().start()\n    context, page = None, None\n\n    # Start browser\n    browser = await playwright.chromium.launch(headless=headless, args=launch_args, slow_mo=slow_mo)\n    context = await browser.new_context(ignore_https_errors=True)\n    page = await context.new_page()\n\n    return context, page, playwright\n\n# Sign In to Expensify\nasync def sign_in_new_dot(page: Page, email: str, password: str):\n    """\n    Sign in into the new Expensify dot.\n    """\n\n    # Go to the URL\n    url = "https://dev.new.expensify.com:8082"\n    await page.goto(url)\n\n    # Sign In\n    with EmailHandler(email, password) as email_handler:\n        if not PROXY_OTP:\n            email_handler.clean_inbox()  # Clean inbox\n\n        # Enter email\n        await page.get_by_test_id("username").fill(email)\n        await page.get_by_role("button", name="Continue").click()\n  \n        # Await OTP\n        otp = "123456" if PROXY_OTP else email_handler.read_otp_code()\n        await page.get_by_test_id("validateCode").fill(otp)\n\n        # Wait sign in to complete\n        await page.get_by_text("Please enter the magic code").wait_for(state="hidden")\n\n# Set distance rate\nasync def set_distance_rate(page: Page) -> None:\n\n    # Go to workspace distance rate settings\n    await page.get_by_label("My settings").click()\n    await page.get_by_test_id("InitialSettingsPage").get_by_label("Workspaces").get_by_text("Workspaces").click()\n    await page.locator(f"text={WS_NAME} Workspace").last.click()\n    await page.get_by_text("Distance rates").click()\n\n    # Add a new distance rate\n    await page.get_by_role("button", name="Add rate").click()\n    await page.get_by_placeholder("0").fill("0.5")\n    await page.get_by_role("button", name="Save").click()\n\n    # Disable the default rate\n    await page.locator("[id=\"\\32 17EA6359859B\"]").get_by_label("R$0.6700 / mile").click()\n    await page.get_by_role("button", name="selected").click()\n    await page.get_by_text("Disable rate").click()\n\n    # Go back to the inbox\n    await page.get_by_label("Back").click()\n    await page.get_by_label("Inbox").click()\n    await page.locator("text=Bob Bill (you)").click()\n\n# Set submit expense\nasync def set_submit_expense(page: Page) -> None:\n\n    # Click on submit expense\n    await page.get_by_label("Start chat (Floating action)").click()\n    await page.get_by_text("Submit expense", exact=True).click()\n\n    # Select distance\n    await page.get_by_label("Distance").click()\n\n    # Set start and end waypoints\n    await page.get_by_test_id("IOURequestStartPage").get_by_role("button", name="Start").click()\n    await page.get_by_test_id("IOURequestStepWaypoint").get_by_role("textbox").fill("NYC")\n    await page.get_by_text("NYC", exact=True).click()\n    await page.get_by_role("button", name="Stop").click()\n    await page.get_by_test_id("IOURequestStepWaypoint").get_by_role("textbox").fill("Liberty")\n    await page.get_by_text("Liberty State Park").click()\n\n    # Click next\n    await page.locator("text=Next").last.click()\n\n    # Select workspace\n    await page.get_by_label(WS_NAME).click()\n\n# Reproduce scenario\nasync def reproduce_scenario(page: Page) -> None:\n\n    # Step 1: Set distance rate\n    await set_distance_rate(page)\n\n    # Step 2: Set submit expense\n    await set_submit_expense(page)\n\n    # Assert that the default rate is the new rate\n    assert await page.get_by_text("mi @ R$0.50 / mi").is_visible()\n\n@pytest.mark.asyncio\nasync def test_disabled_rate_test() -> None:\n    trace_path = '/app/expensify/user_tool/output_browser1.zip'\n    context, page, playwright = await start_browser(slow_mo=500)\n    try:\n        await context.tracing.start(screenshots=True, snapshots=True, sources=True)\n        # Step 1: Login user\n        user_email = get_specific_derived_email(BASE_EMAIL, 42284)\n        await sign_in_new_dot(page, user_email, PASSWORD)\n\n        # Step 3: Reproduce scenario\n        await page.wait_for_timeout(2000)\n        await reproduce_scenario(page)\n    except Exception as e:\n        raise e\n    finally:\n        await context.tracing.stop(path=trace_path)\n        trace_cleaner(trace_path)\n        await close_browser(context, page, playwright)\n