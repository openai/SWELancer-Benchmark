import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nimport os\nimport time\nimport pytest\nfrom playwright.sync_api import sync_playwright, expect\nfrom playwright.sync_api._context_manager import PlaywrightContextManager\nfrom playwright._impl._browser import Browser\nfrom playwright._impl._page import Page\nfrom playwright.sync_api import sync_playwright, expect\nimport re, time\nimport os\nimport imaplib\nimport email\nimport re\nimport random\n\nfrom utils.trace_cleaner import trace_cleaner\n\nNEWDOT_URL = "https://dev.new.expensify.com:8082/"\nOLDDOT_URL = "http://localhost:9000/"\nEMAIL = "turingvidhant+105@gmail.com"\nPASSWORD = "uotx fzkt kfeg dehz"\n\nclass IMAPOTPExtractor:\n    def __init__(self, email_address, password):\n        if not self._validate_email(email_address):\n            raise ValueError("Invalid email address format.")\n        self.original_email = email_address\n        self.password = password\n\n        random_suffix = random.randint(1000, 9999)\n        current_timestamp = int(time.time())\n        random_suffix = f"{current_timestamp}{random_suffix}"\n    \n    def _validate_email(self, email_address):\n        return bool(re.match(r"[^@]+@[^@]+\\.[^@]+", email_address))\n    \n    def set_new_email(self, email):\n        self.new_email = email\n    \n    def check_for_otp(self):\n        try:\n            mail = imaplib.IMAP4_SSL("imap.gmail.com")\n            mail.login(self.original_email, self.password)\n            mail.select("inbox")\n            \n            status, messages = mail.search(None, "UNSEEN")\n            if status != "OK":\n                return None\n            \n            email_ids = messages[0].split()\n            email_ids = email_ids[::-1]\n\n            for email_id in email_ids:\n                status, msg_data = mail.fetch(email_id, '(RFC822)')\n                if status != "OK":\n                    continue\n\n                for response_part in msg_data:\n                    if isinstance(response_part, tuple):\n                        msg = email.message_from_bytes(response_part[1])\n\n                        if self.new_email in msg["To"]:\n                            otp_code = self._extract_otp_from_email(msg)\n                            if otp_code:\n                                mail.store(email_id, '+FLAGS', '\\Deleted')\n                                mail.expunge()\n                                mail.close()\n                                mail.logout()\n                                return otp_code\n\n            mail.close()\n            mail.logout()\n            return None\n\n        except imaplib.IMAP4.error:\n            return None\n\n    def _extract_otp_from_email(self, msg):\n        if msg.is_multipart():\n            for part in msg.walk():\n                if part.get_content_type() == "text/plain":\n                    email_body = part.get_payload(decode=True).decode()\n                    otp_code = self._extract_otp(email_body)\n                    if otp_code:\n                        return otp_code\n        else:\n            email_body = msg.get_payload(decode=True).decode()\n            otp_code = self._extract_otp(email_body)\n            if otp_code:\n                return otp_code\n        return None\n\n    def _extract_otp(self, text):\n        match = re.search(r"\\b\\d{6}\\b", text)\n        return match.group(0) if match else None\n\ngmail_account_helper = IMAPOTPExtractor(EMAIL, PASSWORD)\n\ndef create_workspace_and_enable_feature(page: Page, feature: str):\n    """\n    Creates a new workspace and enables a specified feature.\n\n    Args:\n        page (Page): The Playwright page object.\n        feature (str): The feature to enable (e.g., "Invoices").\n    """\n    page.locator('button[aria-label="Workspaces"]').click()\n    page.wait_for_timeout(100)\n\n    page.get_by_test_id("WorkspaceSwitcherPage").get_by_role(\n        "button", name="New workspace"\n    ).click()\n    page.wait_for_timeout(100)\n\n    page.locator('div[aria-label="More features"]').click()\n    page.wait_for_timeout(100)\n\n    # Toggle feature\n    toggle_button = page.locator(f'button[aria-label="{feature}"]')\n    if not toggle_button.is_checked():\n        toggle_button.click()\n        page.wait_for_timeout(100)\n\n    page.locator('div[aria-label="Tags"]').click()\n    page.wait_for_timeout(100)\n\ndef create_tag(page: Page, tag_name: str):\n    page.locator("button", has_text="Add tag").click()\n    page.wait_for_timeout(100)\n\n    page.locator('input[aria-label="Name"]').fill(tag_name)\n    page.wait_for_timeout(100)\n\n    page.locator('button[data-listener="Enter"]', has_text="Save").click()\n    page.wait_for_timeout(100)\n\ndef select_all_tags(page: Page, check: bool):\n    select_all = page.locator('div[aria-label="Select all"][role="checkbox"]')\n    if (not select_all.is_checked() and check) or (\n        select_all.is_checked() and not check\n    ):\n        select_all.click()\n        page.wait_for_timeout(100)\n\n    if check:\n        return page.locator('button[data-listener="Enter"]').inner_text()\n    else:\n        return None\n\ndef delete_tag(page: Page, tag_name: str):\n    page.locator(f'button[id="{tag_name}"]').click()\n    page.wait_for_timeout(100)\n\n    page.locator('div[aria-label="Delete"]').click()\n    page.wait_for_timeout(100)\n\n    page.locator('button[data-listener="Enter"]').click()\n    page.wait_for_timeout(100)\n\ndef new_dot_login(page, email):\n    page.goto(NEWDOT_URL)\n    page.locator('input[type="email"]').fill(email)\n    page.wait_for_timeout(3000)\n    page.get_by_role("button", name="Continue").nth(0).click()\n    page.wait_for_timeout(3000)\n    gmail_account_helper.set_new_email(email)\n    otp = gmail_account_helper.check_for_otp()\n    page.locator('input[data-testid="validateCode"]').fill("123456")\n    try:\n        page.get_by_role("button", name="Sign In").click()\n    except:\n        pass\n\ndef launch_browser(pw, headless=True, device=None, geolocation=None):\n    """\n    Launch the browser.\n    """\n    browser = pw.chromium.launch(headless=headless)\n    context_args = {}\n    if device:\n        context_args.update(pw.devices[device])\n    if geolocation:\n        context_args["geolocation"] = geolocation\n        context_args["permissions"] = ["geolocation"]\n    context = browser.new_context(**context_args)\n    page = context.new_page()\n    return browser, context, page\n\ndef enable_report_fields(\n    browser: Browser, \n    page: Page, \n    user_email: str, \n):\n    # Click on more features\n    more_features_button = page.locator('div[aria-label="More features"]')\n    expect(more_features_button).to_be_visible()\n    more_features_button.click()\n    page.wait_for_timeout(1000)\n\n    # Enable report fields\n    report_fields_switch = page.locator('button[aria-label="Set up custom fields for spend."]')\n    expect(report_fields_switch).to_be_visible()\n    report_fields_switch.click()\n    page.wait_for_timeout(1000)\n\n    try:\n        page.locator('button[data-tag="pressable"]', has_text="Upgrade").last.click()\n        page.wait_for_timeout(1000)\n\n        page.locator('button[data-tag="pressable"]', has_text="Got it, thanks").last.click()\n        page.wait_for_timeout(1000)\n    except Exception:\n        pass\n\n    report_fields_button = page.locator('div[aria-label="Report fields"][role="menuitem"]')\n    expect(report_fields_button).to_be_visible()\n    report_fields_button.click()\n    page.wait_for_timeout(1000)\n\n    return browser, page, user_email\n\ndef create_new_workspace(\n    browser: Browser, \n    page: Page, \n    user_email: str, \n) -> tuple[Browser, Page, str]:\n    # Step 1: Click on + icon and click on "New workspace"\n    page.get_by_label("Workspaces").click()\n    page.get_by_label("New workspace").click()\n    page.wait_for_timeout(500)\n\n    return browser, page, user_email\n\ndef add_report_field_list_value(\n    page: Page, \n    value: str, \n) -> Page:\n    page.locator('button', has_text="Add value").last.click()\n    page.wait_for_timeout(1000)\n\n    page.locator('input[aria-label="Value"]').last.fill(value)\n    page.wait_for_timeout(1000)\n\n    page.locator('button[data-listener="Enter"]', has_text="Save").last.click()\n    page.wait_for_timeout(1000)\n\n    return page\n\ndef test_expensify():\n    with sync_playwright() as p:\n        browser = p.chromium.launch(headless=True, args=[\n            "--disable-web-security",\n            "--disable-features=IsolateOrigins,site-per-process"\n        ])\n\n        first_user_context = browser.new_context(ignore_https_errors=True)\n        first_user_context.tracing.start(screenshots=True, snapshots=True, sources=True)\n\n        try:\n            page = first_user_context.new_page()\n            page.wait_for_timeout(3000)\n\n            new_dot_login(page, EMAIL)\n            page.wait_for_timeout(3000)\n\n            my_settings = page.locator('button[aria-label="My settings"]')\n            expect(my_settings).to_be_visible()\n            my_settings.click()\n            page.wait_for_timeout(1000)\n\n            work_spaces = page.locator('div[aria-label="Troubleshoot"]')\n            expect(work_spaces).to_be_visible()\n            work_spaces.click()\n            page.wait_for_timeout(1000)\n            client = page.locator('button[aria-label="Client side logging"]')\n            expect(client).to_be_visible()\n            client.click()\n            page.wait_for_timeout(1000)\n\n            expect(page.get_by_text("View debug console")).to_be_visible()\n\n            page.wait_for_timeout(1500)\n        except Exception as e:\n            raise e\n        finally:\n            first_user_context.tracing.stop(path="/app/expensify/user_tool/output_browser1.zip")\n            trace_cleaner("/app/expensify/user_tool/output_browser1.zip")\n            page.close()\n            browser.close()\n