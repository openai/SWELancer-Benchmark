import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nimport time\nimport imaplib\nimport email\nfrom email.header import decode_header\nimport re\nimport time\nfrom playwright.sync_api import sync_playwright, expect\nfrom playwright.sync_api._context_manager import PlaywrightContextManager\nfrom playwright._impl._browser import Browser\nfrom playwright._impl._page import Page\nfrom enum import Enum\n\nfrom utils.trace_cleaner import trace_cleaner\n\nTEST_URL = "https://dev.new.expensify.com:8082"\nUSER_NAME = "caraxxes555"\nUSER_PASSWORD = 'wawm wmyw omkr dpmt'\n\nclass TodayOptions(Enum):\n    TRACK_AND_BUDGET_EXPENSES = 1\n    SOMETHING_ELSE = 4\n\ndef get_test_user_info(seed=None):\n    """\n    Get test user info using the seed:\n    - If `seed` is None, this function will return a fixed email and name.\n    - If `seed` is the `True` boolean value, this function will generate a random number based on the current timestamp and use it as the seed to return a random email and name.\n    - Otherwise, this function will return a derivative of the fixed email and corresponding name.\n    """\n    if seed is None:\n        return {"email": f"{USER_NAME}@gmail.com", "password": USER_PASSWORD, "first_name": f"{USER_NAME}",\n                "last_name": "Test"}\n\n    if type(seed) == type(True):\n        seed = int(time.time())\n\n    return {"email": f"{USER_NAME}+{seed}@gmail.com", "password": USER_PASSWORD, "first_name": f"{USER_NAME}+{seed}",\n            "last_name": "Test"}\n\ndef wait(page, for_seconds=1):\n    page.wait_for_timeout(for_seconds * 1000)\n\ndef get_magic_code(user_email, password, page, retries=5, delay=10):\n    # Connect to the server\n    imap = imaplib.IMAP4_SSL("imap.gmail.com")\n    imap.login(user_email, password)\n    for _ in range(retries):\n        imap.select("inbox")\n        status, messages = imap.search(None, '(UNSEEN SUBJECT "Expensify magic sign-in code:")')\n        if status == "OK":\n            email_ids = messages[0].split()\n            if email_ids:\n                latest_email_id = email_ids[-1]\n                status, msg_data = imap.fetch(latest_email_id, "(RFC822)")\n                for response_part in msg_data:\n                    if isinstance(response_part, tuple):\n                        msg = email.message_from_bytes(response_part[1])\n                        subject, encoding = decode_header(msg["Subject"])[0]\n                        if isinstance(subject, bytes):\n                            subject = subject.decode(encoding or "utf-8")\n                        # Search for the magic code in the subject\n                        match = re.search(r"Expensify magic sign-in code: (\d+)", subject)\n                        if match:\n                            code = match.group(1)\n                            imap.logout()\n                            return code\n            else:\n                print("No unread emails found with the subject. Retrying...")\n        else:\n            print("Failed to retrieve emails. Retrying...")\n        wait(page)\n\n    imap.logout()\n    print("Max retries reached. Email not found.")\n    return None\n\ndef choose_what_to_do_today_if_any(page, option: TodayOptions, retries=5, **kwargs):\n    try:\n        wait(page)\n        for _ in range(retries):\n            wdyw = page.locator("text=What do you want to do today?")\n            if wdyw.count() == 0:\n                print('"What do you want to do today?" dialog is not found. Wait and retry...')\n                wait(page)\n            else:\n                break\n        if wdyw.count() == 0:\n            print('"What do you want to do today?" dialog is not found.')\n            set_full_name(page=page, first_name=kwargs['first_name'], last_name=kwargs['last_name'])\n            return\n        expect(wdyw).to_be_visible()\n        if option == TodayOptions.SOMETHING_ELSE:\n            text = "Something else"\n        elif option == TodayOptions.TRACK_AND_BUDGET_EXPENSES:\n            text = 'Track and budget expenses'\n        page.locator(f"text='{text}'").click()\n        page.get_by_role("button", name="Continue").click()\n        # Enter first name, last name and click continue\n        wait(page)\n        page.locator('input[name="fname"]').fill(kwargs['first_name'])\n        page.locator('input[name="lname"]').fill(kwargs['last_name'])\n        wait(page)\n        page.get_by_role("button", name="Continue").last.click()\n        wait(page)\n        if page.get_by_label("Close").count() > 0:\n            page.get_by_label("Close").click()\n    except:\n        pass\n\ndef choose_link_if_any(page, link_text, retries=5):\n    try:\n        wait(page)\n        for _ in range(retries):\n            link = page.locator(f'text={link_text}')\n            if link.count() == 0:\n                print(f'"{link_text}" link is not found. Wait and retry...')\n                wait(page)\n            else:\n                break\n        if link.count() == 0:\n            print(f'"{link_text}" link is not found.')\n            return\n        expect(link).to_be_visible()\n        link.click()\n    except Exception as e:\n        print(e)\n        return\n\ndef login(p: PlaywrightContextManager, user_info, if_phone=False) -> tuple[Browser, Page, str]:\n    permissions = ['clipboard-read', 'clipboard-write']\n    browser = p.chromium.launch(\n        channel="chrome",\n        headless=True,\n        args=["--disable-web-security", "--disable-features=IsolateOrigins,site-per-process"],\n        proxy={"server": "http://localhost:8080"},\n        slow_mo=500\n    )\n    if if_phone:\n        phone = p.devices['iPhone 12 Pro']\n        context = browser.new_context(**phone, permissions=permissions, reduced_motion='no-preference')\n    else:\n        context = browser.new_context()\n    page = context.new_page()\n    page.goto(TEST_URL, timeout=120000)\n    phone_or_email_input = page.locator('input[type="email"]')\n    expect(phone_or_email_input).to_be_visible()\n    phone_or_email_input.fill(user_info["email"])\n    continue_button = page.locator('button[tabindex="0"]')\n    expect(continue_button).to_be_visible()\n    continue_button.click()\n    # Click Join button if the user is new. Or, use Magic Code to sign in if the user is existing.\n    wait(page)\n    join_button = page.locator('button:has-text("Join")')\n    if join_button.count() > 0:\n        print("Join button found. This is a new user.")\n        join_button.click()\n    else:\n        print("Join button not found. This is an existing user. Use Magic Code to sign in.")\n        magic_code = get_magic_code(user_info["email"], user_info["password"], page, retries=3, delay=10) or "123456"\n        print(f"Magic code: {magic_code}")\n\n        validate_code_input = page.locator('input[data-testid="validateCode"]')\n        expect(validate_code_input).to_be_visible()\n        validate_code_input.fill(magic_code)\n    return browser, page\n\ndef set_full_name(page, first_name, last_name):\n    if page.get_by_label("Close").count() > 0:\n        page.get_by_label("Close").click()\n    page.get_by_label("My settings").click()\n    page.get_by_role("menuitem", name="Profile").click()\n    page.get_by_text("Display name").click()\n    page.get_by_role("textbox", name="First name").click()\n    page.get_by_role("textbox", name="First name").fill(first_name)\n    page.get_by_role("textbox", name="Last name").click()\n    page.get_by_role("textbox", name="Last name").fill(last_name)\n    page.get_by_role("button", name="Save").click()\n    wait(page)\n    if page.get_by_label("Back").count() > 0:\n        page.get_by_label("Back").last.click()\n    page.get_by_label("Inbox").click()\n\ndef create_workspace_change_language(page: Page):\n    # create a new workspace\n    wait(page)\n    page.get_by_label("My settings").click()\n    page.get_by_test_id("InitialSettingsPage").get_by_label("Workspaces").get_by_text("Workspaces").click()\n    page.get_by_label("New workspace").first.click()\n\n    # go back to the settings page\n    wait(page)\n    page.get_by_label("Back").click()\n\n    # change the language to spanish\n    wait(page)\n    page.get_by_label("Preferences").click()\n    page.get_by_label("English").click()\n    page.get_by_label("Spanish").click()\n\n    # go back to LHN\n    wait(page)\n    page.get_by_label("Recibidos").click()\n\ndef submit_expense_in_workspace_chat(page: Page):\n    # Click on workspace chat\n    wait(page)\n    page.locator('button[aria-label="Navega a un chat"]', has_text="'s Workspace").last.click()\n\n    # click on "+" icon and click submit expense\n    wait(page)\n    page.get_by_label("Crear").last.click()\n    page.get_by_label("Presentar gasto").click()\n\n    # Click on "Manual" button and enter amount\n    page.get_by_label("Manual").click()\n    page.get_by_label("Selecciona una moneda").click()\n    page.get_by_test_id("selection-list-text-input").fill("usd")\n    page.get_by_label("USD - $").click()\n    page.get_by_placeholder("0").fill("1000")\n    \n    wait(page)\n    page.locator("#numPadContainerView").get_by_role("button", name="Siguiente").click()\n    page.get_by_role("button", name=re.compile(r"Solicitar")).click()\n\n    page.get_by_role("menuitem", name="Comerciante Este campo es").click()\n    page.get_by_role("textbox", name="Comerciante").fill("test")\n    page.get_by_role("button", name="Guardar").click()\n\n    page.get_by_role("button", name=re.compile(r"Solicitar")).click()\n\ndef test_49840():\n    with sync_playwright() as p:\n        user_info = get_test_user_info(seed=498403)\n        browser, page = login(p, user_info, False)\n        context = page.context\n        trace_path = "/app/expensify/user_tool/output_browser1.zip"\n\n        try:\n            context.tracing.start(screenshots=True, snapshots=True, sources=True)\n\n            # Step 2: Skip onboarding/start pages if any\n            choose_what_to_do_today_if_any(page, TodayOptions.SOMETHING_ELSE, **user_info)\n            # A new user will see this Get Started link on the first logon.\n            choose_link_if_any(page, "Get started")\n            # Somehow the user can be redirected to the not-found page.\n            choose_link_if_any(page, "Go back to home page")\n            create_workspace_change_language(page)\n            submit_expense_in_workspace_chat(page)\n            # change the payment mode to Pay elsewhere\n            page.get_by_label("Ver detalles").get_by_role("button").nth(1).click()\n            page.get_by_label(re.compile(r"Pagar .* de otra")).click()\n            # Click Pay elsewhere\n            page.get_by_role("button", name=re.compile(r"agar .* de otra")).click()\n            # check if "Pago completo" is visible instead of "Payment complete"\n            assert page.get_by_text("Pago completo").is_visible()\n            wait(page)\n\n            # Save and clean trace on success\n            context.tracing.stop(path=trace_path)\n            trace_cleaner(trace_path)\n\n        except Exception as e:\n            print("Test failed:", e)\n            # Save and clean trace even if there's an error\n            context.tracing.stop(path=trace_path)\n            trace_cleaner(trace_path)\n            raise e\n        finally:\n            browser.close()\n