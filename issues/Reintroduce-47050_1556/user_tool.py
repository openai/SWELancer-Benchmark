import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nimport os\nimport re\nimport pytest\nfrom PIL import Image, ImageDraw, ImageFont\nfrom playwright.async_api import expect, async_playwright\nfrom utils.login import sign_up, complete_onboarding\nfrom utils.browser import close_browser\nfrom utils.trace_cleaner import trace_cleaner\n\n# Set up browser\nasync def start_browser(headless=True, proxy=None, launch_args=["--ignore-certificate-errors"]):\n    playwright = await async_playwright().start()\n    browser = await playwright.chromium.launch(headless=headless, proxy=proxy, args=launch_args)\n    context = await browser.new_context(ignore_https_errors=True)\n    page = await context.new_page()\n    return context, page, playwright  # Return playwright to close later\n\ndef generate_invoice_template(filename):\n    # Create a blank white image\n    width, height = 750, 1000\n    image = Image.new('RGB', (width, height), 'white')\n    draw = ImageDraw.Draw(image)\n\n    # Set up fonts (use a default PIL font)\n    try:\n        font = ImageFont.truetype("arial.ttf", 20)\n    except IOError:\n        font = ImageFont.load_default()\n\n    # Draw placeholders for the invoice template\n    draw.text((20, 20), "Invoice Template", fill="black", font=font)\n    draw.text((20, 60), "Company Name: [Your Company]", fill="black", font=font)\n    draw.text((20, 100), "Date: [Invoice Date]", fill="black", font=font)\n    draw.text((20, 140), "Bill To: [Customer Name]", fill="black", font=font)\n    draw.text((20, 180), "Address: [Customer Address]", fill="black", font=font)\n\n    # Draw table headers\n    draw.text((20, 240), "Item Description", fill="black", font=font)\n    draw.text((400, 240), "Quantity", fill="black", font=font)\n    draw.text((520, 240), "Price", fill="black", font=font)\n    draw.text((620, 240), "Total", fill="black", font=font)\n\n    # Draw lines to create table structure\n    draw.line((20, 270, 730, 270), fill="black", width=2)  # Horizontal line below headers\n    y = 310\n    for i in range(5):  # Draw 5 rows for items\n        draw.line((20, y, 730, y), fill="black", width=1)\n        y += 40\n\n    # Save the generated image\n    image.save(filename)\n\n# Test function\n@pytest.mark.asyncio\nasync def test_image():\n    derived_email = "testuserexpensify+15443388@gmail.com"\n\n    # Start browser\n    context, page, playwright = await start_browser(\n        proxy={'server': 'http://127.0.0.1:8080'},\n        launch_args=[\n            '--disable-web-security',\n            '--disable-features=IsolateOrigins,site-per-process'\n        ]\n    )\n\n    # Start tracing\n    await context.tracing.start(title="trace", screenshots=True, snapshots=True, sources=True)\n\n    try:\n        # Step 1: Login / Sign up\n        await sign_up(page, derived_email)\n\n        # Complete onboarding\n        try:\n            await complete_onboarding(page)\n        except Exception:\n            pass\n\n        # Check if the Inbox is visible\n        await expect(page.get_by_label("Inbox")).to_be_visible()\n\n        # Step 2: Fill in expense details and submit\n        await page.get_by_label("Start chat (Floating action)").click()\n        await page.get_by_label("Submit expense").click()\n        await page.get_by_label("Manual").click()\n        await page.get_by_placeholder("0").fill("1")\n        await page.locator("#numPadContainerView").get_by_role("button", name="Next").click()\n        await page.get_by_test_id("selection-list-text-input").fill("a@e.com")\n        await page.get_by_label("a@e.com").click()\n        await page.get_by_label("More", exact=True).click()\n        await page.get_by_label("Add receipt").click()\n\n        # Step 3: Upload a receipt file\n        file_path = os.path.expanduser("./invoice-template-us-neat-750px.png")\n        # Generate the invoice template image\n        generate_invoice_template(file_path)\n        # Check if the file exists\n        if os.path.exists(file_path):\n            async with page.expect_file_chooser() as fc_info:\n                await page.get_by_label("Choose file").click()\n            file_chooser = await fc_info.value\n            await file_chooser.set_files(file_path)\n        else:\n            raise FileNotFoundError(f"File not found: {file_path}")\n\n        # Step 4: Click Submit button\n        await page.get_by_role("button", name=re.compile(r"^Submit")).click()\n\n        # Step 5: Verify that the receipt thumbnail shows the correct image during upload\n        parent_locator = page.get_by_label("View details")\n        receipt_thumbnail = parent_locator.locator("div.css-view-175oi2r.r-flexBasis-1mlwlqe img.css-accessibilityImage-9pa8cd")\n        await expect(receipt_thumbnail).to_have_attribute("src", re.compile(r"blob:"), timeout=500)\n\n        if os.path.exists(file_path):\n            os.remove(file_path)\n\n    except Exception as e:\n        # Re-raise to ensure test framework sees the failure\n        raise e\n    finally:\n        # Stop tracing and export\n        trace_path = "/app/expensify/user_tool/output_browser1.zip"\n        await context.tracing.stop()\n        await context.tracing.export(path=trace_path)\n\n        # Clean the trace\n        trace_cleaner(trace_path)\n\n        # Close browser\n        await close_browser(context, page, playwright)\n