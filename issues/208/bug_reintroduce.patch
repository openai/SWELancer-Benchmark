diff --git a/src/CONST.ts b/src/CONST.ts
index 4ca9b45f13d..165802d7186 100755
--- a/src/CONST.ts
+++ b/src/CONST.ts
@@ -2691,6 +2691,7 @@ const CONST = {
         SHORT_MENTION: new RegExp(`@[\\w\\-\\+\\'#@]+(?:\\.[\\w\\-\\'\\+]+)*(?![^\`]*\`)`, 'gim'),
         REPORT_ID_FROM_PATH: /\/r\/(\d+)/,
         DISTANCE_MERCHANT: /^[0-9.]+ \w+ @ (-|-\()?[^0-9.\s]{1,3} ?[0-9.]+\)? \/ \w+$/,
+        MENTION_REPLACER: /^@[^\n\r]*?(?=$|\s)/,
 
         get EXPENSIFY_POLICY_DOMAIN_NAME() {
             return new RegExp(`${EXPENSIFY_POLICY_DOMAIN}([a-zA-Z0-9]+)\\${EXPENSIFY_POLICY_DOMAIN_EXTENSION}`);
diff --git a/src/libs/actions/Report.ts b/src/libs/actions/Report.ts
index 0fe2bfbf8d4..f4ebe5a39d8 100644
--- a/src/libs/actions/Report.ts
+++ b/src/libs/actions/Report.ts
@@ -1333,6 +1333,10 @@ function saveReportDraftComment(reportID: string, comment: string | null, callba
     Onyx.merge(`${ONYXKEYS.COLLECTION.REPORT_DRAFT_COMMENT}${reportID}`, prepareDraftComment(comment)).then(callback);
 }
 
+function setReportWithDraft(reportID: string, hasDraft: boolean) {
+    return Onyx.merge(`${ONYXKEYS.COLLECTION.REPORT}${reportID}`, {hasDraft});
+}
+
 /** Broadcasts whether or not a user is typing on a report over the report's private pusher channel. */
 function broadcastUserIsTyping(reportID: string) {
     const privateReportChannelName = getReportChannelName(reportID);
@@ -4104,6 +4108,7 @@ export {
     unsubscribeFromReportChannel,
     unsubscribeFromLeavingRoomReportChannel,
     saveReportDraftComment,
+    setReportWithDraft,
     broadcastUserIsTyping,
     broadcastUserIsLeavingRoom,
     togglePinnedState,
diff --git a/src/pages/home/report/ReportActionCompose/ComposerWithSuggestions/ComposerWithSuggestions.tsx b/src/pages/home/report/ReportActionCompose/ComposerWithSuggestions/ComposerWithSuggestions.tsx
index e63bd952b4a..86b94e6443a 100644
--- a/src/pages/home/report/ReportActionCompose/ComposerWithSuggestions/ComposerWithSuggestions.tsx
+++ b/src/pages/home/report/ReportActionCompose/ComposerWithSuggestions/ComposerWithSuggestions.tsx
@@ -405,42 +405,30 @@ function ComposerWithSuggestions(
         [selection.start, selection.end],
     );
 
-    /**
-     * Update the value of the comment in Onyx
-     */
     const updateComment = useCallback(
         (commentValue: string, shouldDebounceSaveComment?: boolean) => {
             raiseIsScrollLikelyLayoutTriggered();
-            const {startIndex, endIndex, diff} = findNewlyAddedChars(lastTextRef.current, commentValue);
-            const isEmojiInserted = diff.length && endIndex > startIndex && diff.trim() === diff && EmojiUtils.containsOnlyEmojis(diff);
-            const commentWithSpaceInserted = isEmojiInserted ? ComposerUtils.insertWhiteSpaceAtIndex(commentValue, endIndex) : commentValue;
-            const {text: newComment, emojis, cursorPosition} = EmojiUtils.replaceAndExtractEmojis(commentWithSpaceInserted, preferredSkinTone, preferredLocale);
-            if (emojis.length) {
-                const newEmojis = EmojiUtils.getAddedEmojis(emojis, emojisPresentBefore.current);
-                if (newEmojis.length) {
-                    // Ensure emoji suggestions are hidden after inserting emoji even when the selection is not changed
-                    if (suggestionsRef.current) {
-                        suggestionsRef.current.resetSuggestions();
-                    }
-                }
-            }
-            const newCommentConverted = convertToLTRForComposer(newComment);
-            const isNewCommentEmpty = !!newCommentConverted.match(/^(\s)*$/);
+            
+            // Extract the text and emojis from the comment using the old logic
+            const { text: newComment = '', emojis = [] } = EmojiUtils.replaceEmojis(
+                commentValue, 
+                preferredSkinTone,
+                preferredLocale, 
+            );
+
+            const isCommentEmpty = !!newComment.match(/^(\s)*$/);
             const isPrevCommentEmpty = !!commentRef.current.match(/^(\s)*$/);
 
-            /** Only update isCommentEmpty state if it's different from previous one */
-            if (isNewCommentEmpty !== isPrevCommentEmpty) {
-                setIsCommentEmpty(isNewCommentEmpty);
+            // Only update isCommentEmpty state if it's different from previous one
+            if (isCommentEmpty !== isPrevCommentEmpty) {
+                setIsCommentEmpty(isCommentEmpty);
             }
-            emojisPresentBefore.current = emojis;
 
-            setValue(newCommentConverted);
+            // Manage selection logic based on new comment and previous selection
+            setValue(newComment);
             if (commentValue !== newComment) {
-                const position = Math.max((selection.end ?? 0) + (newComment.length - commentRef.current.length), cursorPosition ?? 0);
-
-                if (commentWithSpaceInserted !== newComment && isIOSNative) {
-                    syncSelectionWithOnChangeTextRef.current = {position, value: newComment};
-                }
+                const remainder = commentRef.current.slice(selection.end ?? 0).length;
+                const position = newComment.length - remainder;
 
                 setSelection((prevSelection) => ({
                     start: position,
@@ -450,18 +438,29 @@ function ComposerWithSuggestions(
                 }));
             }
 
-            commentRef.current = newCommentConverted;
+            // Update local reference for the current comment
+            commentRef.current = newComment;
+
+            // Manage draft and saving logic
+            if (commentRef.current.length === 0 && newComment.length !== 0) {
+                Report.setReportWithDraft(reportID, true);
+            } else if (newComment.length === 0) {
+                Report.setReportWithDraft(reportID, false);
+            }
+
             if (shouldDebounceSaveComment) {
                 isCommentPendingSaved.current = true;
-                debouncedSaveReportComment(reportID, newCommentConverted);
+                debouncedSaveReportComment(reportID, newComment);
             } else {
-                Report.saveReportDraftComment(reportID, newCommentConverted);
+                Report.saveReportDraftComment(reportID, newComment || '');
             }
-            if (newCommentConverted) {
+
+            // Broadcast typing indication
+            if (newComment) {
                 debouncedBroadcastUserIsTyping(reportID);
             }
         },
-        [findNewlyAddedChars, preferredLocale, preferredSkinTone, reportID, setIsCommentEmpty, suggestionsRef, raiseIsScrollLikelyLayoutTriggered, debouncedSaveReportComment, selection.end],
+        [preferredLocale, preferredSkinTone, reportID, setIsCommentEmpty, selection.end, debouncedSaveReportComment, debouncedBroadcastUserIsTyping, raiseIsScrollLikelyLayoutTriggered]
     );
 
     /**
diff --git a/src/pages/home/report/ReportActionCompose/SuggestionMention.tsx b/src/pages/home/report/ReportActionCompose/SuggestionMention.tsx
index 8d37a1915cb..42f6211d187 100644
--- a/src/pages/home/report/ReportActionCompose/SuggestionMention.tsx
+++ b/src/pages/home/report/ReportActionCompose/SuggestionMention.tsx
@@ -187,22 +187,28 @@ function SuggestionMention(
         [formatLoginPrivateDomain],
     );
 
-    /**
-     * Replace the code of mention and update selection
-     */
     const insertSelectedMention = useCallback(
         (highlightedMentionIndexInner: number) => {
+            // Extract the comment before and after the @ sign
             const commentBeforeAtSign = value.slice(0, suggestionValues.atSignIndex);
             const mentionObject = suggestionValues.suggestedMentions[highlightedMentionIndexInner];
-            const mentionCode = getMentionCode(mentionObject, suggestionValues.prefixType);
-            const commentAfterMention = value.slice(suggestionValues.atSignIndex + suggestionValues.mentionPrefix.length + 1);
+            const mentionCode = `@${mentionObject.alternateText}`; // Use mention's alternateText like in the old code
+            
+            // Remove the mention using regex like the old code
+            const commentAfterAtSignWithMentionRemoved = value.slice(suggestionValues.atSignIndex).replace(CONST.REGEX.MENTION_REPLACER, '');
+            // const trimmedCommentAfter = commentAfterAtSignWithMentionRemoved.trimStart(); // Trim leading space as per the old logic
+
+            // Update the comment with mention inserted
+            updateComment(`${commentBeforeAtSign}${mentionCode} ${commentAfterAtSignWithMentionRemoved}`, true);
 
-            updateComment(`${commentBeforeAtSign}${mentionCode} ${SuggestionsUtils.trimLeadingSpace(commentAfterMention)}`, true);
+            // Set selection position after the mention
             const selectionPosition = suggestionValues.atSignIndex + mentionCode.length + CONST.SPACE_LENGTH;
             setSelection({
                 start: selectionPosition,
                 end: selectionPosition,
             });
+
+            // Update suggestion-related values and reset
             suggestionInsertionIndexRef.current = selectionPosition;
             setSuggestionValues((prevState) => ({
                 ...prevState,
@@ -215,13 +221,13 @@ function SuggestionMention(
             suggestionValues.atSignIndex,
             suggestionValues.suggestedMentions,
             suggestionValues.prefixType,
-            suggestionValues.mentionPrefix.length,
-            getMentionCode,
+            getMentionCode, // Updated to use the alternateText for mentions
             updateComment,
             setSelection,
         ],
     );
 
+
     /**
      * Clean data related to suggestions
      */
