import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nimport re\nimport pytest\nfrom utils.login import sign_up, complete_onboarding\nfrom utils.browser import start_browser, close_browser\nfrom playwright.async_api import expect, async_playwright\nfrom playwright._impl._page import Page\nfrom utils.trace_cleaner import trace_cleaner\n\n# Test function\n@pytest.mark.asyncio\nasync def test_leave_chat_thread():\n    derived_email = "testuserexpensify+967441130@gmail.com"\n\n    # Start browser\n    context, page, playwright = await start_browser(launch_args=[\n        '--disable-web-security',\n        '--disable-features=IsolateOrigins,site-per-process'\n    ])\n\n    # Begin tracing\n    await context.tracing.start(screenshots=True, snapshots=True)\n    trace_path = "/app/expensify/user_tool/output_browser1.zip"\n\n    try:\n        # Step 1: Login / Sign up\n        await sign_up(page, derived_email)\n\n        # Complete onboarding\n        try:\n            await complete_onboarding(page)\n        except Exception:\n            pass\n\n        # Check if the Inbox is visible\n        await expect(page.get_by_label("Inbox")).to_be_visible()\n\n        # Step 2: Create a chat group\n        await page.get_by_label("Start chat (Floating action)").click()\n        await page.get_by_text("Start chat").click()\n        await page.get_by_test_id("selection-list-text-input").fill("testuser@gmail.com")\n        await page.wait_for_timeout(2000)\n        await page.get_by_role("button", name="Add to group").click()\n        await page.get_by_test_id("selection-list-text-input").click()\n        await page.get_by_test_id("selection-list-text-input").fill("testuser1@gmail.com")\n        await page.wait_for_timeout(2000)\n        await page.get_by_role("button", name="Add to group").click()\n        await page.get_by_role("button", name="Next").click()\n        await page.get_by_role("button", name="Start group").click()\n\n        # Step 3: Start a message thread\n        await page.get_by_role("textbox").click()\n        await page.get_by_role("textbox").fill("Message A")\n        await page.get_by_role("button", name="Send").click()\n        await page.locator("span").filter(has_text="Message A").click(button="right")\n        await page.get_by_text("Reply in thread").click()\n        await page.get_by_role("textbox").fill("Message B")\n        await page.get_by_role("button", name="Send").click()\n\n        # Step 4: open the message thread\n        await page.get_by_label("Message a").click()\n        # Assert that the "Leave" button is not visible on the details page of a thread\n        await expect(page.get_by_text("Leave")).not_to_be_visible()\n\n    finally:\n        # Stop tracing and save the trace\n        await context.tracing.stop(path=trace_path)\n        trace_cleaner(trace_path)\n\n        # Close browser\n        await close_browser(context, page, playwright)\n