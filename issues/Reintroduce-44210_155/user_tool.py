import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nimport time\nimport pytest\nimport random\nfrom playwright.sync_api import sync_playwright, Page\nfrom utils.trace_cleaner import trace_cleaner\n\ndef generate_random_email():\n    timestamp = int(time.time())\n    return f\"expensify44210+{timestamp}@gmail.com\"\n\ndef generate_random_name():\n    first_names = [\"John\", \"Jane\", \"Alex\", \"Emily\", \"Chris\", \"Sam\", \"Max\", \"Taylor\"]\n    last_names = [\n        \"Smith\",\n        \"Doe\",\n        \"Johnson\",\n        \"Williams\",\n        \"Brown\",\n        \"Davis\",\n        \"Miller\",\n        \"Wilson\",\n    ]\n    return random.choice(first_names), random.choice(last_names)\n\n@pytest.fixture\ndef setup_playwright(request):\n    width = getattr(request, \"param\", {}).get(\"width\", 1280)\n    height = getattr(request, \"param\", {}).get(\"height\", 720)\n\n    playwright = sync_playwright().start()\n\n    browser = playwright.chromium.launch(\n        headless=True, args=[\n            \"--disable-web-security\",\n            \"--disable-features=IsolateOrigins,site-per-process\"\n        ]\n    )\n\n    context = browser.new_context(viewport={\"width\": width, \"height\": height})\n    context.tracing.start(screenshots=True, snapshots=True, sources=True)\n    page = context.new_page()\n\n    try:\n        yield page\n    finally:\n        context.tracing.stop(path=\"/app/expensify/user_tool/output_browser1.zip\")\n        trace_cleaner(\"/app/expensify/user_tool/output_browser1.zip\")\n        browser.close()\n        playwright.stop()\n\ndef login_user(page: Page, email: str, first_name: str, last_name: str):\n    page.goto(\"https://dev.new.expensify.com:8082/\")\n    page.locator('input[type=\"email\"]').fill(email)\n    page.locator('button[tabindex=\"0\"]').click()\n    time.sleep(1)\n    try:\n        page.locator(\"button\", has_text=\"Join\").click()\n        time.sleep(0.1)\n    except Exception:\n        pass\n    page.locator(\"text='Track and budget expenses'\").click()\n    page.get_by_role(\"button\", name=\"Continue\").click()\n    time.sleep(0.1)\n    page.locator('input[name=\"fname\"]').fill(first_name)\n    page.locator('input[name=\"lname\"]').fill(last_name)\n    page.get_by_role(\"button\", name=\"Continue\").last.click()\n    time.sleep(0.1)\n\ndef check_if_wrapped(element):\n    is_wrapped = element.evaluate('(element) => {\n            const lineHeight = parseFloat(getComputedStyle(element).lineHeight);\n            const lines = element.clientHeight / lineHeight;\n            return lines > 1;\n        }')\n\n    return is_wrapped\n\n@pytest.mark.parametrize(\n    \"setup_playwright\",\n    [{\"width\": 375, \"height\": 812}],  # Samsung Z Fold 5's front display dimensions\n    indirect=True,\n)\ndef test_workspaces_header(setup_playwright):\n    page = setup_playwright\n    email = generate_random_email()\n    first_name, last_name = generate_random_name()\n\n    login_user(page, email, first_name, last_name)\n    page.locator('button[aria-label=\"My settings\"]').click()\n    page.locator('div[aria-label=\"Workspaces\"]').click()\n\n    back_button = page.locator(\"#backButton\")\n    parent_element = back_button.locator(\"..\")\n    workspaces_div = parent_element.locator(\"div\", has_text=\"Workspaces\").last\n\n    if workspaces_div.count() == 0:\n        print(\"No 'Workspaces' div found.\")\n        return None\n\n    is_wrapped = check_if_wrapped(workspaces_div)\n\n    assert not is_wrapped, \"Workspaces header is wrapped into multiple lines!\"\n