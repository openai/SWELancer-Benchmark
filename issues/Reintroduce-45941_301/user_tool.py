import sys, os\n\nfrom utils.trace_cleaner import trace_cleaner\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nimport time\nfrom playwright.sync_api import sync_playwright, expect\nfrom playwright.sync_api._context_manager import PlaywrightContextManager\nfrom playwright._impl._browser import Browser\nfrom playwright._impl._page import Page\nfrom playwright.sync_api import TimeoutError as PlaywrightTimeoutError\n\nprimary_email = "expensifyolddot@gmail.com"\n\n\n# Utility to generate a random email for testing\ndef generate_random_email(primary_email):\n    # timestamp = int(time.time())\n    # return f"{primary_email.split('@')[0]}+{timestamp}@{primary_email.split('@')[1]}"\n    return "expensifyolddot+1733997749@gmail.com"\n\ndef login_user(\n    p: PlaywrightContextManager, first_name="A", last_name="Khan"\n) -> tuple[Browser, Page, str]:\n    # Launch chromium browser and open a new page\n    browser = p.chromium.launch(\n        channel="chrome",\n        headless=True,\n        args=[\n            "--ignore-certificate-errors",\n            "--disable-web-security",\n            "--disable-features=IsolateOrigins,site-per-process",\n        ],\n        proxy={"server": "http://localhost:8080"},\n        slow_mo=500,\n    )\n    context_args = {}\n    context_args["timezone_id"] = "Asia/Karachi"\n    context = browser.new_context(**context_args)\n    page = context.new_page()\n    user_email = generate_random_email(primary_email)\n\n    # Step 1: Open the Expensify URL\n    page.goto("https://dev.new.expensify.com:8082/")\n\n    # Step 2: Enter the generated email and click continue\n    page.locator('input[type="email"]').fill(user_email)\n    page.locator('button[tabindex="0"]').click()\n    time.sleep(1)\n\n    # Step 3: Click the join button if necessary (in case it didn't register the first time)\n    try:\n        page.locator('button[tabindex="0"]').click()\n        time.sleep(1)\n    except Exception:\n        pass\n\n    # Step 4: Ensure that the user has reached the main menu\n    expect(page.locator("text=What do you want to do today?")).to_be_visible()\n\n    # Step 5: Select 'Track and budget expenses' during onboarding and click Continue\n    page.locator("text='Track and budget expenses'").click()\n    page.get_by_role("button", name="Continue").click()\n    time.sleep(1)\n\n    # Step 6: Enter first name and last name, then click continue\n    page.locator('input[name="fname"]').fill(first_name)\n    page.locator('input[name="lname"]').fill(last_name)\n    page.get_by_role("button", name="Continue").last.click()\n    time.sleep(1)\n\n    # Return the browser, page\n    return browser, page, context\n\ndef test_old_dot_page_redirection():\n    with sync_playwright() as p:\n        browser, page, context = login_user(p)\n\n        # Start tracing\n        context.tracing.start(screenshots=True, snapshots=True, sources=True)\n\n        try:\n            # Navigate to exit-survey reason page\n            page.goto("https://dev.new.expensify.com:8082/settings/exit-survey/reason")\n            time.sleep(1)\n\n            # Assert that the exit survey page is opened\n            expect(page).to_have_url("https://dev.new.expensify.com:8082/settings/exit-survey/reason")\n\n            # Check one of the boxes and fill in the form\n            page.get_by_text("I don't understand how to use New Expensify.").click()\n\n            # Assert the correct option is selected\n            expect(\n                page.get_by_text("I don't understand how to use New Expensify.")\n            ).to_be_visible()\n\n            # Click on the next button and proceed\n            page.get_by_text("Next").click()\n\n            # Fill in the response textbox\n            page.get_by_role("textbox", name="Your response").fill("N/A")\n\n            # Assert the textbox has the correct value\n            expect(page.get_by_role("textbox", name="Your response")).to_have_value("N/A")\n\n            # Click on the Next button\n            page.get_by_role("button", name="Next").click()\n\n            # Click on the "Switch to Expensify Classic" button\n            page.get_by_role("button", name="Switch to Expensify Classic").click()\n\n            try:\n                # Expect the new page (new tab) to open\n                with context.expect_page() as new_page_info:\n                    new_page = new_page_info.value\n\n                    # Assert that the new page was successfully opened\n                    assert (\n                        new_page is not None\n                    ), "A new tab should have opened but it didn't."\n\n            except PlaywrightTimeoutError:\n                assert False, "Failed to open new tab after clicking the 'Switch to Expensify Classic' button."\n\n            # Sleep to allow observation if needed\n            time.sleep(1)\n\n        finally:\n            # Stop tracing and export the trace\n            trace_path = "/app/expensify/user_tool/output_browser1.zip"\n            context.tracing.stop()\n            context.tracing.export(trace_path)\n            trace_cleaner(trace_path)\n\n            # Close the browser\n            browser.close()\n