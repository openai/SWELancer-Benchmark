diff --git a/src/components/SettlementButton/AnimatedSettlementButton.tsx b/src/components/SettlementButton/AnimatedSettlementButton.tsx
index 5de528d741a..7bc6cffdc4d 100644
--- a/src/components/SettlementButton/AnimatedSettlementButton.tsx
+++ b/src/components/SettlementButton/AnimatedSettlementButton.tsx
@@ -15,7 +15,6 @@ type AnimatedSettlementButtonProps = SettlementButtonProps & {
 
 function AnimatedSettlementButton({isPaidAnimationRunning, onAnimationFinish, isDisabled, ...settlementButtonProps}: AnimatedSettlementButtonProps) {
     const styles = useThemeStyles();
-    const {translate} = useLocalize();
     const buttonScale = useSharedValue(1);
     const buttonOpacity = useSharedValue(1);
     const paymentCompleteTextScale = useSharedValue(0);
diff --git a/src/components/SettlementButton/translate.ts b/src/components/SettlementButton/translate.ts
new file mode 100644
index 00000000000..ec9f50c368c
--- /dev/null
+++ b/src/components/SettlementButton/translate.ts
@@ -0,0 +1,26 @@
+import useLocalize from '@hooks/useLocalize';
+
+const translations = {
+    en: {
+        'iou.paymentComplete': 'Payment complete',
+    },
+    es: {
+        'iou.paymentComplete': 'Pago completo',
+    },
+};
+
+/**
+ * Buggy translate function
+ * Uses `useLocalize` to dynamically get and set the locale
+ * @param key - The translation key
+ * @returns Translated text or fallback to English
+ */
+export function translate(key: string): string {
+    const {currentLocale} = useLocalize(); // Dynamically get the current locale
+
+    if (key === 'iou.paymentComplete') {
+        return translations.en[key] || 'Payment complete'; // Always use English for the buggy case
+    }
+
+    return translations[currentLocale]?.[key] || key; // Use locale-based translations
+}
