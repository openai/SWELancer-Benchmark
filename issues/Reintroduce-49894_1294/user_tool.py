import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nimport time\n\nimport pytest\nfrom playwright.async_api import expect\n\nfrom utils.browser import start_browser, close_browser\nfrom utils.login import check_if_logged_in, NEW_DOT_URL, sign_in\nfrom utils.trace_cleaner import trace_cleaner\n\nEMAIL = 'testexpensifyturing+006@gmail.com'\nPASSWORD = 'qqdd pegp kagr emax'\n\n@pytest.mark.asyncio\nasync def test_issue_49894():\n    context, page, playwright = await start_browser(\n        persistent=True,\n        launch_args=['--disable-web-security', '--disable-features=IsolateOrigins, site-per-process'],\n    )\n\n    await context.tracing.start(\n        title='test_issue_49894',\n        screenshots=True,\n        snapshots=True,\n    )\n\n    try:\n        # Sign in\n        if not await check_if_logged_in(page=page, url=NEW_DOT_URL):\n            await page.get_by_test_id('username').fill(EMAIL)\n            await page.get_by_role('button', name='Continue').click()\n            await page.get_by_test_id('validateCode').fill('123456')\n\n        # Start Room Chat\n        await page.get_by_label('Start chat (Floating action)').click()\n        await page.get_by_text('Start chat').click()\n        await page.get_by_label('Room', exact=True).click()\n        await page.get_by_placeholder('social').fill(f'room{int(time.time())}')\n        await page.get_by_role('textbox', name='Room description (optional)').fill('`  `')\n        await page.get_by_role('button', name='Create room').click()\n        await page.wait_for_timeout(500)\n\n        # Assign task and set title and empty description\n        await page.get_by_role('button', name='Create').click()\n        await page.get_by_label('Assign task').click()\n        await page.get_by_role('textbox', name='Title').fill('title1')\n        await page.get_by_role('button', name='Next').click()\n\n        # Edit description and type '` `'\n        await page.get_by_test_id('NewTaskPage').get_by_text('Description').click()\n        await page.get_by_role('textbox', name='Description (optional)').fill('` `')\n        await page.get_by_role('button', name='Next').click()\n\n        # Check if this is in markdown\n        await expect(page.get_by_test_id('NewTaskPage').locator('span')).to_have_text(' ')\n\n        # Open description and add a space\n        await page.get_by_test_id('NewTaskPage').get_by_text('Description').click()\n        await page.wait_for_timeout(1000)\n        await page.get_by_role('textbox', name='Description (optional)').fill('`Â ` ')\n        await page.get_by_role('button', name='Next').click()\n\n        # Check if this is still in markdown\n        await page.wait_for_timeout(500)\n        await expect(page.get_by_test_id('NewTaskPage').locator('span')).to_have_count(1)\n        await expect(page.get_by_test_id('NewTaskPage').locator('span')).to_have_text(' ')\n\n    finally:\n        await context.tracing.stop(path='/app/expensify/user_tool/output_browser1.zip')\n        trace_cleaner('/app/expensify/user_tool/output_browser1.zip')\n        await close_browser(context, page, playwright)\n