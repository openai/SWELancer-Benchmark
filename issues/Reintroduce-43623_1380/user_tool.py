import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nfrom time import time\nfrom playwright.sync_api import sync_playwright, expect\nfrom playwright._impl._page import Page\nimport imaplib\nimport email\nfrom email.header import decode_header\nimport re\n\nfrom utils.trace_cleaner import trace_cleaner\n\ndef launch_app(p, headless=True, device=None, geolocation=None):\n    """\n    Launch the Expensify app.\n    """\n    browser = p.chromium.launch(headless=headless,\n                args=[\n                    '--ignore-certificate-errors',\n                    '--disable-web-security',\n                    '--disable-features=IsolateOrigins,site-per-process',\n                ])\n    context_args = {}\n    if device:\n        context_args.update(p.devices[device])\n    if geolocation:\n        context_args["geolocation"] = geolocation\n        context_args["permissions"] = ["geolocation"]\n    context = browser.new_context(**context_args)\n    page = context.new_page()\n    return browser, context, page\n\ndef login_with_otp(page: Page, user_email) -> Page:\n    # Step 1: Open expensify url\n    page.goto('https://dev.new.expensify.com:8082/') \n\n    # Enter email and click continue\n    page.locator('input[type="email"]').fill(user_email)\n    page.locator('button[tabindex="0"]').click()\n\n    # Check latest mail for 40 seconds for mail with OTP\n    code = get_magic_code(page, user_email, "aymv mpce nrvd cvye ", retries=8, delay=5000)\n    page.wait_for_timeout(2000)\n    code= "123456"\n    # Enter OTP\n    page.locator('input[autocomplete="one-time-code"]').fill(code)\n    # page.locator('button[tabindex="0"]').click()\n\n    return page\n\ndef get_magic_code(page, user_email, password, retries=8, delay=5000):\n\n    # Connect to the server\n    imap = imaplib.IMAP4_SSL("imap.gmail.com")\n    imap.login(user_email, password)\n\n    for _ in range(retries):\n        imap.select("inbox")\n        status, messages = imap.search(None, '(UNSEEN SUBJECT "sign-in code:")')\n\n        if status == "OK":\n            email_ids = messages[0].split()\n\n            if email_ids:\n                latest_email_id = email_ids[-1]\n                status, msg_data = imap.fetch(latest_email_id, "(RFC822)")\n\n                for response_part in msg_data:\n                    if isinstance(response_part, tuple):\n                        msg = email.message_from_bytes(response_part[1])\n                        subject, encoding = decode_header(msg["Subject"])[0]\n                        if isinstance(subject, bytes):\n                            subject = subject.decode(encoding or "utf-8")\n\n                        # Search for the magic code in the subject\n                        match = re.search(r"sign-in code: (\\d+)", subject)\n                        if match:\n                            code = match.group(1)\n                            imap.logout()\n                            return code\n            else:\n                print("No unread emails found with the subject. Retrying...")\n        else:\n            print("Failed to retrieve emails. Retrying...")\n\n        # Wait for the specified delay before trying again\n        page.wait_for_timeout(2000)\n\n    imap.logout()\n    print("Max retries reached. Email not found.")\n    return None\n\ndef test_workspace_no_category():\n    with sync_playwright() as p:\n        browser, context, page = launch_app(p)\n        context.tracing.start(screenshots=True, snapshots=True, sources=True)\n        try:\n            user_email = "bobexpensifytest+1730068043@gmail.com"\n\n            page = login_with_otp(page, user_email)\n\n            personal_chat = page.locator('button[aria-label="Navigates to a chat"]', has_text="Bob T (you)")\n            expect(personal_chat).to_be_visible()\n            personal_chat.click()\n\n            categorize = page.get_by_text("Categorize it")\n            expect(categorize).to_be_visible()\n            categorize.click()\n\n            page.wait_for_timeout(3000)\n\n            workspaace_with_no_category_button = page.locator('button[aria-label="Workspace with NO Category"]')\n            expect(workspaace_with_no_category_button).not_to_be_visible()\n        except Exception as e:\n            raise e\n        finally:\n            context.tracing.stop(path="/app/expensify/user_tool/output_browser1.zip")\n            trace_cleaner("/app/expensify/user_tool/output_browser1.zip")\n            browser.close()\n