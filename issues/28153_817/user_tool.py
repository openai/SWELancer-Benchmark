import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nimport re\nimport time\nfrom playwright.sync_api import sync_playwright, expect\nfrom playwright.sync_api._context_manager import PlaywrightContextManager\nfrom playwright._impl._browser import Browser\nfrom playwright._impl._page import Page\nimport imaplib\nimport email\nfrom email.header import decode_header\nfrom json import tool\n\nfrom utils.trace_cleaner import trace_cleaner\n\nUSER_EMAIL = "playwright2user+105@gmail.com"\nPASSWORD = "zehr mglm gizg gjcc"\n\ndef fetch_verification_code_from_email(user_email, password, retries=10, delay=10):\n    """\n    Fetch the OTP code from the latest email.\n    """\n    imap = imaplib.IMAP4_SSL("imap.gmail.com")\n    imap.login(user_email, password)\n\n    for attempt in range(retries):\n        imap.select("inbox")\n        status, messages = imap.search(\n            None, '(UNSEEN SUBJECT "Expensify magic sign-in code")'\n        )\n        if status == "OK":\n            email_ids = messages[0].split()\n\n            if email_ids:\n                # Retrieve the most recent email ID\n                latest_email_id = email_ids[-1]\n                status, msg_data = imap.fetch(latest_email_id, "(RFC822)")\n\n                for response_part in msg_data:\n                    if isinstance(response_part, tuple):\n                        msg = email.message_from_bytes(response_part[1])\n\n                        # Check if the email is multipart (contains HTML and text)\n                        if msg.is_multipart():\n                            for part in msg.walk():\n                                content_type = part.get_content_type()\n                                if content_type == "text/plain":\n                                    body = part.get_payload(decode=True).decode()\n                                    match = re.search(r'\\b\\d{6}\\b', body)\n                                    if match:\n                                        otp_code = match.group(0)\n                                        imap.logout()\n                                        return otp_code\n                        else:\n                            # If the email is not multipart, decode the plain text payload directly\n                            body = msg.get_payload(decode=True).decode()\n                            match = re.search(r'\\b\\d{6}\\b', body)\n                            if match:\n                                otp_code = match.group(0)\n                                imap.logout()\n                                return otp_code\n            else:\n                print("No new emails found. Retrying...")\n                otp_code="123456"\n                return otp_code\n        else:\n            print("Failed to retrieve emails. Retrying...")\n\n        # Wait before trying again\n        time.sleep(delay)\n\n    imap.logout()\n    raise Exception("Max retries reached. No magic code email found.")\n\ndef login_user(p: PlaywrightContextManager, first_name="Milan", last_name="T") -> tuple[Browser, Page, str]:\n    # Launch chromiun and open new page\n    browser = p.chromium.launch(\n            headless=True,  # Set to False to see the browser\n            args=[\n                "--disable-web-security",  # Disable CORS (for testing only)\n                "--disable-features=IsolateOrigins,site-per-process"\n            ])\n    context = browser.new_context(ignore_https_errors=True)\n    page = context.new_page()\n    user_email = USER_EMAIL\n    first_name = 'You can choose first name of your choice and paste'\n    last_name = 'You can choose last name of your choice and paste'\n\n    # Step 1: Open expensify url\n    page.goto('https://dev.new.expensify.com:8082/') \n\n    # Step 2: Enter email and click continue\n    page.locator('input[type="email"]').fill(user_email)\n    page.locator('button[tabindex="0"]').click()\n    page.wait_for_timeout(2000)\n\n    verification_code = fetch_verification_code_from_email(user_email, PASSWORD)\n    \n    # Enter the OTP\n    otp_input = page.locator("[autocomplete='one-time-code']")\n    expect(otp_input).to_be_visible()\n    otp_input.fill(verification_code)\n\n    # Step 3: Click join button\n    try: \n        page.locator('button[tabindex="0"]').click() \n        page.wait_for_timeout(4000)\n    except Exception:\n        pass\n\n    return browser, page, user_email\n\ndef test_dropdown_select_button():\n    with sync_playwright() as p:\n        browser, page, user_email = login_user(p)\n        context = page.context\n        context.tracing.start(\n            title="Trace",\n            screenshots=True,\n            snapshots=True\n        )\n        try:\n            # step 1: Open settings and workspaces\n            page.wait_for_timeout(2000)\n\n            page.locator('button[aria-label="My settings"]').click()\n            page.locator('div[aria-label="Workspaces"]').click()\n\n            # step 2:  Create a new workspace\n            page.get_by_role('button', name='New workspace').nth(0).click()\n\n            # Step 4: Go to inbox\n            back_arrow_button = page.locator('button[aria-label="Back"]')\n            expect(back_arrow_button).to_be_visible()\n            back_arrow_button.click()\n\n            inbox_menu = page.locator('button[aria-label="Inbox"]')\n            expect(inbox_menu).to_be_visible()\n            inbox_menu.click()\n            page.wait_for_timeout(2000)\n\n            # Step 5: Navigate into the chat\n            chat_1 = page.locator('button[aria-label="Navigates to a chat"]').nth(1)\n            expect(chat_1).to_be_visible()\n            chat_1.click()\n\n            chat_2 = page.locator('button[aria-label="Navigates to a chat"]').nth(2)\n            expect(chat_2).to_be_visible()\n            chat_2.click()\n            page.wait_for_timeout(2000)\n            page.wait_for_timeout(2000)\n\n            tooltip_div = page.locator('div[data-testid="DisplayNamesWithTooltip"]').nth(1)\n            span_element = tooltip_div.locator('span').get_by_text('....')\n            span_element.hover()\n            page.wait_for_timeout(3000)\n\n            # Step 6: get tooltip property\n            tooltip = page.locator('span:has-text("You can choose first name of your choice and paste (you)")').last\n            text_align_property = tooltip.evaluate("element => window.getComputedStyle(element).textAlign")\n            page.wait_for_timeout(2000)\n\n            if text_align_property == 'center':\n                assert True, 'Tooltip is center aligned.'\n            else:\n                assert False, 'Tooltip is not center aligned'\n\n        except Exception as e:\n            raise e\n        finally:\n            context.tracing.stop(path="/app/expensify/user_tool/output_browser1.zip")\n            trace_cleaner("/app/expensify/user_tool/output_browser1.zip")\n            browser.close()\n