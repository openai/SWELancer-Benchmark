diff --git a/src/components/Lottie/index.tsx b/src/components/Lottie/index.tsx
index 017d68aa4b5..0f2e68bf7e5 100644
--- a/src/components/Lottie/index.tsx
+++ b/src/components/Lottie/index.tsx
@@ -18,8 +18,7 @@ type Props = {
     shouldLoadAfterInteractions?: boolean;
 } & Omit<LottieViewProps, 'source'>;
 
-function Lottie({source, webStyle, shouldLoadAfterInteractions, ...props}: Props, forwardedRef: ForwardedRef<LottieView>) {
-    const animationRef = useRef<LottieView | null>(null);
+function Lottie({source, webStyle, shouldLoadAfterInteractions, ...props}: Props, ref: ForwardedRef<LottieView>) {
     const appState = useAppState();
     const {splashScreenState} = useSplashScreenStateContext();
     const styles = useThemeStyles();
@@ -56,44 +55,51 @@ function Lottie({source, webStyle, shouldLoadAfterInteractions, ...props}: Props
     const navigationContainerRef = useContext(NavigationContainerRefContext);
     const navigator = useContext(NavigationContext);
 
-    useEffect(() => {
-        if (!browser || !navigationContainerRef || !navigator) {
-            return;
-        }
-        const unsubscribeNavigationFocus = navigator.addListener('focus', () => {
-            setHasNavigatedAway(false);
-        });
-        return unsubscribeNavigationFocus;
-    }, [browser, navigationContainerRef, navigator]);
+    const isInitialMount = useRef(true);
+    const [shouldPlayAnimation, setShouldPlayAnimation] = useState(() => {
+        return true;
+    });
 
     useEffect(() => {
         if (!browser || !navigationContainerRef || !navigator) {
             return;
         }
+
         const unsubscribeNavigationBlur = navigator.addListener('blur', () => {
-            const state = navigationContainerRef.getRootState();
-            const targetRouteName = state?.routes?.[state?.index ?? 0]?.name;
-            if (!isSideModalNavigator(targetRouteName)) {
-                setHasNavigatedAway(true);
-            }
+            setShouldPlayAnimation(false);
+            setHasNavigatedAway(true);
         });
-        return unsubscribeNavigationBlur;
+
+        const unsubscribeNavigationFocus = navigator.addListener('focus', () => {
+            setShouldPlayAnimation(false);
+        });
+
+        return () => {
+            unsubscribeNavigationBlur();
+            unsubscribeNavigationFocus();
+        };
     }, [browser, navigationContainerRef, navigator]);
 
-    // If user is being navigated away, let pause the animation to prevent memory leak.
-    // see issue: https://github.com/Expensify/App/issues/36645
     useEffect(() => {
-        if (!animationRef.current || !hasNavigatedAway) {
-            return;
-        }
-        animationRef?.current?.pause();
-    }, [hasNavigatedAway]);
+        return () => {
+            setHasNavigatedAway(false);
+        };
+    }, []);
 
     // If the page navigates to another screen, the image fails to load, app is in background state, animation file isn't ready, or the splash screen isn't hidden yet,
     // we'll just render an empty view as the fallback to prevent
-    // 1. heavy rendering, see issues: https://github.com/Expensify/App/issues/34696 and https://github.com/Expensify/App/issues/47273
-    // 2. lag on react navigation transitions, see issue: https://github.com/Expensify/App/issues/44812
-    if (isError || appState.isBackground || !animationFile || splashScreenState !== CONST.BOOT_SPLASH_STATE.HIDDEN || (!isInteractionComplete && shouldLoadAfterInteractions)) {
+    if (
+        hasNavigatedAway ||
+        isError ||
+        appState.isBackground ||
+        !animationFile ||
+        splashScreenState !== CONST.BOOT_SPLASH_STATE.HIDDEN ||
+        (!isInteractionComplete && shouldLoadAfterInteractions)
+    ) {
         return <View style={[aspectRatioStyle, props.style]} />;
     }
 
@@ -102,18 +108,11 @@ function Lottie({source, webStyle, shouldLoadAfterInteractions, ...props}: Props
             // eslint-disable-next-line react/jsx-props-no-spreading
             {...props}
             source={animationFile}
-            ref={(ref) => {
-                if (typeof forwardedRef === 'function') {
-                    forwardedRef(ref);
-                } else if (forwardedRef && 'current' in forwardedRef) {
-                    // eslint-disable-next-line no-param-reassign
-                    forwardedRef.current = ref;
-                }
-                animationRef.current = ref;
-            }}
+            ref={ref}
             style={[aspectRatioStyle, props.style]}
             webStyle={{...aspectRatioStyle, ...webStyle}}
             onAnimationFailure={() => setIsError(true)}
+            autoPlay={shouldPlayAnimation}
         />
     );
 }
