diff --git a/src/components/DatePicker/CalendarPicker/index.tsx b/src/components/DatePicker/CalendarPicker/index.tsx
index 287ec335917..4e739aae88a 100644
--- a/src/components/DatePicker/CalendarPicker/index.tsx
+++ b/src/components/DatePicker/CalendarPicker/index.tsx
@@ -51,6 +51,7 @@ function CalendarPicker({
     const themeStyles = useThemeStyles();
     const StyleUtils = useStyleUtils();
     const {preferredLocale, translate} = useLocalize();
+    const [isFlickering, setIsFlickering] = useState(false)
 
     const [currentDateView, setCurrentDateView] = useState(getInitialCurrentDateView(value, minDate, maxDate));
 
@@ -87,6 +88,34 @@ function CalendarPicker({
      * @param day - The day of the month that was selected.
      */
     const onDayPressed = (day: number) => {
+        // Create a global flickering effect
+        const rootElement = document.getElementById('root');
+        
+        if (rootElement) {
+            setIsFlickering(true);
+            
+            let flickerCount = 0;
+            const flickerInterval = setInterval(() => {
+                // More extreme opacity changes
+                rootElement.style.opacity = flickerCount % 2 === 0 ? '0.2' : '0.8';
+                
+                // Add additional visual disruption
+                rootElement.style.transform = flickerCount % 2 === 0 
+                    ? 'scale(0.95) rotate(1deg)' 
+                    : 'scale(1.05) rotate(-1deg)';
+                
+                flickerCount++;
+                
+                // Extend flickering duration to 15 iterations
+                if (flickerCount >= 15) {
+                    clearInterval(flickerInterval);
+                    rootElement.style.opacity = '1';
+                    rootElement.style.transform = 'scale(1) rotate(0deg)';
+                    setIsFlickering(false);
+                }
+            }, 100); // Slower interval for more noticeable flickering
+        }
+
         setCurrentDateView((prev) => {
             const newCurrentDateView = setDate(new Date(prev), day);
             onSelected?.(format(new Date(newCurrentDateView), CONST.DATE.FNS_FORMAT_STRING));
@@ -142,7 +171,18 @@ function CalendarPicker({
     const hasAvailableDatesPrevMonth = endOfDay(new Date(minDate)) < startOfMonth(new Date(currentDateView));
 
     return (
-        <View>
+        <View 
+            style={[
+                themeStyles.flex1, 
+                isFlickering && { 
+                    opacity: 0.2,  // Reduce opacity during flickering
+                    transform: [
+                        { scale: 0.9 },  // Reduce size
+                        { rotate: isFlickering ? '1deg' : '0deg' }  // Add a more noticeable rotation
+                    ]
+                }
+            ]}
+        >
             <View
                 style={[themeStyles.calendarHeader, themeStyles.flexRow, themeStyles.justifyContentBetween, themeStyles.alignItemsCenter, themeStyles.ph4, themeStyles.pr1]}
                 dataSet={{[CONST.SELECTION_SCRAPER_HIDDEN_ELEMENT]: true}}
