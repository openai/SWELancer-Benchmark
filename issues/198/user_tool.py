import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nimport os\nimport pytest\nimport time\nfrom playwright.sync_api import sync_playwright, expect\nimport imaplib\nimport email\nfrom email.header import decode_header\nimport re\nfrom playwright.sync_api._context_manager import PlaywrightContextManager\nfrom playwright._impl._browser import Browser\nfrom playwright._impl._page import Page\n\npassword = "ywvy nytt kjig mscy"\nuser_email = "jellystarfish99@gmail.com"\n\nmagic_code = "111111"\n\ndef get_magic_code(user_email, password, retries=5, delay=10):\n\n    # Connect to the server\n    imap = imaplib.IMAP4_SSL("imap.gmail.com")\n    imap.login(user_email, password)\n\n    for attempt in range(retries):\n\n        imap.select("inbox")\n        status, messages = imap.search(None, '(UNSEEN SUBJECT "Expensify magic sign-in code:")')\n\n        if status == "OK":\n            email_ids = messages[0].split()\n\n            if email_ids:\n                latest_email_id = email_ids[-1]\n                status, msg_data = imap.fetch(latest_email_id, "(RFC822)")\n\n                for response_part in msg_data:\n                    if isinstance(response_part, tuple):\n                        msg = email.message_from_bytes(response_part[1])\n                        subject, encoding = decode_header(msg["Subject"])[0]\n                        if isinstance(subject, bytes):\n                            subject = subject.decode(encoding or "utf-8")\n\n                        # Search for the magic code in the subject\n                        match = re.search(r"Expensify magic sign-in code: (\d+)", subject)\n                        if match:\n                            code = match.group(1)\n                            imap.logout()\n                            return code\n            else:\n                print("No unread emails found with the subject. Retrying...")\n        else:\n            print("Failed to retrieve emails. Retrying...")\n\n        # Wait for the specified delay before trying again\n        time.sleep(delay)\n\n    imap.logout()\n    print("Max retries reached. Email not found.")\n    return None\n\ndef create_user(\n    page: Page, firstname: str\n):\n\n    # Sign up\n    page.locator('input[type="email"]').fill(user_email)\n    page.locator('button[tabindex="0"]').click()\n    page.wait_for_timeout(1000)\n\n    # Step 3: Enter the magic code\n    # magic_code = get_magic_code(user_email, password, retries=3, delay=10)\n\n    validate_code_input = page.locator('input[data-testid="validateCode"]')\n    expect(validate_code_input).to_be_visible()\n    validate_code_input.fill(magic_code)\n\n    page.wait_for_timeout(2000)\n\n    # Update profile\n    if page.locator("text=What do you want to do today?").is_visible():\n        page.get_by_text("Track and budget expenses").click()\n        page.get_by_role("textbox", name="First name").fill(firstname)\n        page.wait_for_timeout(1000)\n        page.get_by_role("button", name="Continue").click()\n\ndef close_button_if_present(page: Page):\n    """\n    Occasionally, there is a close button that prevents any clicks on the page as\n    it covers most of the screen. This button cannot be seen visually.\n    """\n    close_button = page.locator('button[aria-label="Close"]')\n    if close_button.is_visible():\n        close_button.click()\n\ndef test_newline_indicator():\n    with sync_playwright() as p:\n        browser = p.chromium.launch(headless=True, args=["--ignore-certificate-errors", "--disable-web-security", "--disable-features=IsolateOrigins,site-per-process"])\n        context = browser.new_context()\n        context.tracing.start(screenshots=True, snapshots=True, sources=True)\n        page = context.new_page()\n        try:\n            page.goto("https://dev.new.expensify.com:8082/")\n\n            # create user\n            create_user(page, "TestUser")\n            page.wait_for_timeout(1000)\n\n            close_button_if_present(page)\n\n            # Start chat\n            green_button = page.locator('button[aria-label="Start chat (Floating action)"][tabindex="0"]')\n            green_button.click()\n            page.wait_for_timeout(1000)\n\n            start_chat = page.locator('div[aria-label="Start chat"][role="menuitem"]')\n            start_chat.click()\n            page.wait_for_timeout(1000)\n\n            input_field = page.locator('input[data-testid="selection-list-text-input"]')\n            input_field.fill(user_email)\n            page.wait_for_timeout(1000)\n\n            page.get_by_text(f"Test (you)").click()\n            page.get_by_role("textbox").fill("Parent")\n            page.keyboard.press("Enter")\n            page.wait_for_timeout(1000)\n\n            page.get_by_test_id("report-actions-list").get_by_text("Parent").last.click(\n                button="right"\n            )\n            page.wait_for_timeout(1000)\n\n            page.get_by_label("Reply in thread").last.click()\n            page.wait_for_timeout(1000)\n            page.get_by_role("textbox").fill("Thread 1")\n            page.wait_for_timeout(1000)\n            page.keyboard.press("Enter")\n            page.wait_for_timeout(1000)\n\n            page.get_by_text("Parent").last.click(button="right")\n            page.wait_for_timeout(1000)\n\n            page.get_by_label("Mark as unread").last.click()\n            page.wait_for_timeout(1000)\n\n            expect(page.get_by_label("New message line indicator").last).to_be_visible()\n\n        except Exception as e:\n            print(f"Test failed: {e}")\n            raise\n        finally:\n            context.tracing.stop(path="/app/expensify/user_tool/output_browser1.zip")\n            from utils.trace_cleaner import trace_cleaner\n            trace_cleaner("/app/expensify/user_tool/output_browser1.zip")\n            context.close()\n            browser.close()\n