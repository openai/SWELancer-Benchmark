diff --git a/src/CONST.ts b/src/CONST.ts
index 4ca9b45f13d..df039b3f50a 100755
--- a/src/CONST.ts
+++ b/src/CONST.ts
@@ -1407,7 +1407,6 @@ const CONST = {
     CHAT_FOOTER_SECONDARY_ROW_HEIGHT: 15,
     CHAT_FOOTER_SECONDARY_ROW_PADDING: 5,
     CHAT_FOOTER_MIN_HEIGHT: 65,
-    CHAT_FOOTER_HORIZONTAL_PADDING: 40,
     CHAT_SKELETON_VIEW: {
         AVERAGE_ROW_HEIGHT: 80,
         HEIGHT_FOR_ROW_COUNT: {
diff --git a/src/components/AutoCompleteSuggestions/BaseAutoCompleteSuggestions.tsx b/src/components/AutoCompleteSuggestions/BaseAutoCompleteSuggestions.tsx
index 2d22a2560bb..c2320f7c020 100644
--- a/src/components/AutoCompleteSuggestions/BaseAutoCompleteSuggestions.tsx
+++ b/src/components/AutoCompleteSuggestions/BaseAutoCompleteSuggestions.tsx
@@ -1,33 +1,48 @@
-import type {ReactElement} from 'react';
-import React, {useCallback, useEffect, useRef} from 'react';
-import {FlatList} from 'react-native-gesture-handler';
-import Animated, {Easing, useAnimatedStyle, useSharedValue, withTiming} from 'react-native-reanimated';
+import {FlashList} from '@shopify/flash-list';
+import React, {ForwardedRef, forwardRef, ReactElement, useCallback, useEffect, useRef} from 'react';
+import {View} from 'react-native';
+// We take ScrollView from this package to properly handle the scrolling of AutoCompleteSuggestions in chats since one scroll is nested inside another
+import {ScrollView} from 'react-native-gesture-handler';
+import Animated, {Easing, FadeOutDown, useAnimatedStyle, useSharedValue, withTiming} from 'react-native-reanimated';
 import ColorSchemeWrapper from '@components/ColorSchemeWrapper';
 import PressableWithFeedback from '@components/Pressable/PressableWithFeedback';
 import useStyleUtils from '@hooks/useStyleUtils';
 import useThemeStyles from '@hooks/useThemeStyles';
-import * as DeviceCapabilities from '@libs/DeviceCapabilities';
 import CONST from '@src/CONST';
-import type {AutoCompleteSuggestionsPortalProps} from './AutoCompleteSuggestionsPortal';
-import type {RenderSuggestionMenuItemProps} from './types';
+import viewForwardedRef from '@src/types/utils/viewForwardedRef';
+import type {AutoCompleteSuggestionsProps, RenderSuggestionMenuItemProps} from './types';
 
-type ExternalProps<TSuggestion> = Omit<AutoCompleteSuggestionsPortalProps<TSuggestion>, 'left' | 'bottom'>;
+const measureHeightOfSuggestionRows = (numRows: number, isSuggestionPickerLarge: boolean): number => {
+    if (isSuggestionPickerLarge) {
+        if (numRows > CONST.AUTO_COMPLETE_SUGGESTER.MAX_AMOUNT_OF_VISIBLE_SUGGESTIONS_IN_CONTAINER) {
+            // On large screens, if there are more than 5 suggestions, we display a scrollable window with a height of 5 items, indicating that there are more items available
+            return CONST.AUTO_COMPLETE_SUGGESTER.MAX_AMOUNT_OF_VISIBLE_SUGGESTIONS_IN_CONTAINER * CONST.AUTO_COMPLETE_SUGGESTER.SUGGESTION_ROW_HEIGHT;
+        }
+        return numRows * CONST.AUTO_COMPLETE_SUGGESTER.SUGGESTION_ROW_HEIGHT;
+    }
+    if (numRows > 2) {
+        // On small screens, we display a scrollable window with a height of 2.5 items, indicating that there are more items available beyond what is currently visible
+        return CONST.AUTO_COMPLETE_SUGGESTER.SMALL_CONTAINER_HEIGHT_FACTOR * CONST.AUTO_COMPLETE_SUGGESTER.SUGGESTION_ROW_HEIGHT;
+    }
+    return numRows * CONST.AUTO_COMPLETE_SUGGESTER.SUGGESTION_ROW_HEIGHT;
+};
 
-function BaseAutoCompleteSuggestions<TSuggestion>({
-    highlightedSuggestionIndex = 0,
-    onSelect,
-    accessibilityLabelExtractor,
-    renderSuggestionMenuItem,
-    suggestions,
-    keyExtractor,
-    measuredHeightOfSuggestionRows,
-}: ExternalProps<TSuggestion>) {
+function BaseAutoCompleteSuggestions<TSuggestion>(
+    {
+        highlightedSuggestionIndex,
+        onSelect,
+        accessibilityLabelExtractor,
+        renderSuggestionMenuItem,
+        suggestions,
+        isSuggestionPickerLarge,
+        keyExtractor,
+    }: AutoCompleteSuggestionsProps<TSuggestion>,
+    ref: ForwardedRef<View | HTMLDivElement>,
+) {
     const styles = useThemeStyles();
     const StyleUtils = useStyleUtils();
     const rowHeight = useSharedValue(0);
-    const prevRowHeightRef = useRef<number>(measuredHeightOfSuggestionRows);
-    const fadeInOpacity = useSharedValue(0);
-    const scrollRef = useRef<FlatList<TSuggestion>>(null);
+    const scrollRef = useRef<FlashList<TSuggestion>>(null);
     /**
      * Render a suggestion menu item component.
      */
@@ -48,63 +63,40 @@ function BaseAutoCompleteSuggestions<TSuggestion>({
     );
 
     const innerHeight = CONST.AUTO_COMPLETE_SUGGESTER.SUGGESTION_ROW_HEIGHT * suggestions.length;
-
-    const animatedStyles = useAnimatedStyle(() => ({
-        opacity: fadeInOpacity.value,
-        ...StyleUtils.getAutoCompleteSuggestionContainerStyle(rowHeight.value),
-    }));
+    const animatedStyles = useAnimatedStyle(() => StyleUtils.getAutoCompleteSuggestionContainerStyle(rowHeight.value));
 
     useEffect(() => {
-        if (measuredHeightOfSuggestionRows === prevRowHeightRef.current) {
-            // eslint-disable-next-line react-compiler/react-compiler
-            fadeInOpacity.value = withTiming(1, {
-                duration: 70,
-                easing: Easing.inOut(Easing.ease),
-            });
-            rowHeight.value = measuredHeightOfSuggestionRows;
-        } else {
-            fadeInOpacity.value = 1;
-            rowHeight.value = withTiming(measuredHeightOfSuggestionRows, {
-                duration: 100,
-                easing: Easing.bezier(0.25, 0.1, 0.25, 1),
-            });
-        }
-
-        prevRowHeightRef.current = measuredHeightOfSuggestionRows;
-    }, [suggestions.length, rowHeight, measuredHeightOfSuggestionRows, prevRowHeightRef, fadeInOpacity]);
+        rowHeight.value = withTiming(measureHeightOfSuggestionRows(suggestions.length, isSuggestionPickerLarge), {
+            duration: 100,
+            easing: Easing.inOut(Easing.ease),
+        });
+    }, [suggestions.length, isSuggestionPickerLarge, rowHeight]);
 
     useEffect(() => {
         if (!scrollRef.current) {
             return;
         }
-        // When using cursor control (moving the cursor with the space bar on the keyboard) on Android, moving the cursor too fast may cause an error.
-        try {
-            scrollRef.current.scrollToIndex({index: highlightedSuggestionIndex, animated: true});
-        } catch (e) {
-            // eslint-disable-next-line no-console
-        }
+        scrollRef.current.scrollToIndex({index: highlightedSuggestionIndex, animated: true});
     }, [highlightedSuggestionIndex]);
 
     return (
         <Animated.View
+            ref={viewForwardedRef(ref)}
             style={[styles.autoCompleteSuggestionsContainer, animatedStyles]}
-            onPointerDown={(e) => {
-                if (DeviceCapabilities.hasHoverSupport()) {
-                    return;
-                }
-                e.preventDefault();
-            }}
+            exiting={FadeOutDown.duration(100).easing(Easing.inOut(Easing.ease))}
         >
             <ColorSchemeWrapper>
-                <FlatList
+                <FlashList
+                    estimatedItemSize={CONST.AUTO_COMPLETE_SUGGESTER.SUGGESTION_ROW_HEIGHT}
                     ref={scrollRef}
                     keyboardShouldPersistTaps="handled"
                     data={suggestions}
                     renderItem={renderItem}
+                    renderScrollComponent={ScrollView}
                     keyExtractor={keyExtractor}
                     removeClippedSubviews={false}
                     showsVerticalScrollIndicator={innerHeight > rowHeight.value}
-                    extraData={[highlightedSuggestionIndex, renderSuggestionMenuItem]}
+                    extraData={highlightedSuggestionIndex}
                 />
             </ColorSchemeWrapper>
         </Animated.View>
@@ -113,4 +105,4 @@ function BaseAutoCompleteSuggestions<TSuggestion>({
 
 BaseAutoCompleteSuggestions.displayName = 'BaseAutoCompleteSuggestions';
 
-export default BaseAutoCompleteSuggestions;
+export default forwardRef(BaseAutoCompleteSuggestions);
