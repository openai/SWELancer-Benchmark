import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nfrom playwright.sync_api import sync_playwright, expect\nfrom utils.trace_cleaner import trace_cleaner\n\nGMAIL_NAME = "nomandevtur+27363"\nGMAIL_APP_PASSWORD = ""\n\n\ndef get_test_user_info(seed = None, first_name = None, last_name = None):\n    if first_name is None:\n        first_name = GMAIL_NAME\n\n    if last_name is None:\n        last_name = ""\n\n    email = f"{GMAIL_NAME}+{seed}@gmail.com" if seed is not None else f"{GMAIL_NAME}@gmail.com"\n\n    return {"email": email, "password": GMAIL_APP_PASSWORD, "first_name": first_name, "last_name": last_name}\n\n\ndef select_activity(page, first_name, last_name, activity_text):\n    expect(page.get_by_text("What do you want to do today?")).to_be_visible()\n\n    # Select activity in onboarding page and click Continue\n    page.get_by_label(activity_text).click()\n\n    # Enter first name, last name and click continue\n    page.get_by_role("textbox", name="First name").fill(first_name)\n    page.get_by_role("textbox", name="Last name").fill(last_name)\n    page.get_by_role("button", name="Continue").last.click()\n\ndef login_user(page, user_info, activity_text="Track and budget expenses"):\n    # Clear cookies, local storage, and session storage\n    page.context.clear_cookies()\n\n    page.goto('https://dev.new.expensify.com:8082/')\n    page.wait_for_load_state('load')\n\n    try:\n        # If the user is already logged in, the inbox should be visible\n        expect(page.get_by_label("Inbox")).to_be_visible(timeout=3000)\n        return\n    except:\n        pass\n\n    page.get_by_test_id("username").fill(user_info["email"])\n    page.get_by_role("button", name="Continue").click()\n\n    join_button = page.get_by_role("button", name="Join")\n    validate_code_input = page.locator('input[data-testid="validateCode"]')\n\n    if (join_button.is_visible()):\n        join_button.click(timeout=3000)\n    else:\n        magic_code = "123456"\n        print(f"Magic code: {magic_code}")\n        validate_code_input.fill(magic_code)\n\n    page.wait_for_timeout(3000)\n\n    select_activity_dialog = page.get_by_text("What do you want to do today?")\n    if select_activity_dialog.count() > 0:\n        select_activity(page, user_info["first_name"], user_info["last_name"], activity_text)\n\ndef launch_app(pw, headless=True, device=None, geolocation=None):\n    browser = pw.chromium.launch(headless=headless, slow_mo=500, args=[\n            "--disable-web-security",\n            "--disable-features=IsolateOrigins,site-per-process"\n        ],\n    )\n    context_args = {"viewport": {"width": 1024, "height": 640}}\n    if device:\n        context_args.update(pw.devices[device])\n    if geolocation:\n        context_args["geolocation"] = geolocation\n        context_args["permissions"] = ["geolocation"]\n    context = browser.new_context(**context_args)\n    page = context.new_page()\n    return browser, context, page\n\ndef test_assign_share_url():\n    with sync_playwright() as p:\n        trace_path = "/app/expensify/user_tool/output_browser1.zip"\n        browser, context, page = None, None, None\n\n        try:\n            browser, context, page = launch_app(p)\n            context.tracing.start(screenshots=True, snapshots=True, sources=True)\n\n            user_info = get_test_user_info(first_name="abc", last_name="abc")\n            login_user(page, user_info)\n\n            page.wait_for_timeout(3000)\n\n            # move to personal chat\n            locator = page.locator(f"span:has-text('random email (you)')").click()\n\n            page.wait_for_timeout(1000)\n            screen_id = page.url.split('/')[-1]\n\n            page.get_by_test_id(f"report-screen-{screen_id}").get_by_label("Create").click()\n            page.get_by_label("Assign task").click()\n            page.get_by_role("textbox", name="Title").fill("task99")\n            page.get_by_role("button", name="Next").click()\n            page.get_by_test_id("NewTaskPage").get_by_label("Back").click()\n            page.wait_for_timeout(1000)\n            page.get_by_label("Back").click()\n            page.wait_for_timeout(1000)\n            page.get_by_role("textbox").fill("https://dev.new.expensify.com:8082/new/task/somewhere11")\n\n            page.get_by_test_id(f"report-screen-{screen_id}").get_by_label("Send").click()\n            page.get_by_test_id(f"report-screen-{screen_id}").get_by_test_id("report-actions-list").get_by_text("https://dev.new.expensify.com:8082/new/task/somewhere11").click()\n            page.wait_for_timeout(3000)\n\n            # Check if the div containing the text "Hmm... it's not here" is present\n            locator = page.locator('div:has-text("Hmm... it\\'s not here")')\n\n            # Assert that the div is present\n            assert locator.count() > 0, "The div with the text 'Hmm... it's not here' is not found."\n\n            print("The message 'Hmm... it's not here' is visible on page")\n\n            page.wait_for_timeout(4000)\n\n        except Exception as e:\n            print("Test failed with exception:", e)\n            raise e\n        finally:\n            if page and not page.is_closed():\n                page.close()\n            if browser:\n                browser.close()\n            if context:\n                context.tracing.stop(path=trace_path)\n            trace_cleaner(trace_path)\n