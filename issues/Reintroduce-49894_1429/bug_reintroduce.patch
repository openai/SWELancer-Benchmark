
diff --git a/package-lock.json b/package-lock.json
index e08766b5e49..3ffebaa8614 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,12 +1,12 @@
 {
   "name": "new.expensify",
-  "version": "9.0.48-0",
+  "version": "9.0.41-1",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
     "": {
       "name": "new.expensify",
-      "version": "9.0.48-0",
+      "version": "9.0.41-1",
       "hasInstallScript": true,
       "license": "MIT",
       "dependencies": {
diff --git a/package.json b/package.json
index b944cd94149..74d164140f1 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "new.expensify",
-  "version": "9.0.48-0",
+  "version": "9.0.41-1",
   "author": "Expensify, Inc.",
   "homepage": "https://new.expensify.com",
   "description": "New Expensify is the next generation of Expensify: a reimagination of payments based atop a foundation of chat.",
diff --git a/src/libs/StringUtils.ts b/src/libs/StringUtils.ts
index d13c38700e1..0050d67771d 100644
--- a/src/libs/StringUtils.ts
+++ b/src/libs/StringUtils.ts
@@ -37,16 +37,18 @@ function removeInvisibleCharacters(value: string): string {
     // - \u2060: word joiner
     result = result.replace(/[\u200B\u2060]/g, '');
 
-    // The control unicode (Cc) regex removes all newlines,
-    // so we first split the string by newline and rejoin it afterward to retain the original line breaks.
-    result = result
-        .split('\n')
-        .map((part) =>
-            // Remove all characters from the 'Other' (C) category except for format characters (Cf)
-            // because some of them are used for emojis
-            part.replace(/[\p{Cc}\p{Cs}\p{Co}\p{Cn}]/gu, ''),
-        )
-        .join('\n');
+    // Temporarily replace all newlines with non-breaking spaces
+    // It is necessary because the next step removes all newlines because they are in the (Cc) category
+    result = result.replace(/\n/g, '\u00A0');
+
+    // Remove all characters from the 'Other' (C) category except for format characters (Cf)
+    // because some of them are used for emojis
+    result = result.replace(/[\p{Cc}\p{Cs}\p{Co}\p{Cn}]/gu, '');
+
+    // Replace all non-breaking spaces with newlines
+    result = result.replace(/\u00A0/g, '\n');
+    
+    
 
     // Remove characters from the (Cf) category that are not used for emojis
     result = result.replace(/[\u200E-\u200F]/g, '');
