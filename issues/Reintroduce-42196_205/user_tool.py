import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nfrom playwright.sync_api import sync_playwright, expect\nfrom playwright.sync_api._context_manager import PlaywrightContextManager\nfrom playwright._impl._browser import Browser\nfrom playwright._impl._page import Page\nfrom utils.trace_cleaner import trace_cleaner\n\nURL = "https://127.0.0.1:8082/"\n\ndef initialize_page_context(p: PlaywrightContextManager) -> tuple[Browser, Page]:\n    # Launch chromium and open a new page\n    browser = p.chromium.launch(headless=True, slow_mo=1000,\n        proxy={"server": "http://127.0.0.1:8080/"},\n        args=[\n            "--ignore-certificate-errors",\n            "--disable-web-security",\n            "--disable-features=IsolateOrigins,site-per-process"\n        ])\n    context_args = {}\n    context_args["geolocation"] = {"latitude": 37.7749, "longitude": 122.4194}\n    context_args["permissions"] = ["geolocation"]\n    context_args["ignore_https_errors"] = True\n    context = browser.new_context(**context_args)\n    page = context.new_page()\n    page.wait_for_timeout(5000)\n    page.goto(URL)\n    return browser, page\n\ndef login_user(page: Page, user_email, first_name="Milan", last_name="T") -> str:\n    # Step 2: Enter email and click continue\n    page.locator('input[type="email"]').fill(user_email)\n    page.locator('button[data-listener="Enter"]', has_text="Continue").click()\n\n    # Step 3: Click join button\n    page.locator('button[data-listener="Enter"]', has_text="Join").click()\n\n    # Step 4: Select 'Something else' in onboarding page and click Continue\n    something_else_button = page.locator('div[aria-label="Something else"]')\n    something_else_button.click()\n\n    # Step 5: Enter first name, last name and click continue\n    page.locator('input[name="fname"]').fill(first_name)\n    page.locator('input[name="lname"]').fill(last_name)\n    page.get_by_role("button", name="Continue").last.click()\n\n    return user_email\n\ndef logout_user(page: Page) -> str:\n    account_settings_button = page.get_by_role("button", name="My Settings")\n    account_settings_button.click()\n    signout_button = page.get_by_role("menuitem", name="Sign out")\n    signout_button.click()\n\ndef test_manual_expense_description_cursor_should_not_overlap_with_text_content():\n    with sync_playwright() as p:\n        browser, page = initialize_page_context(p)\n        context = page.context\n        context.tracing.start(screenshots=True, snapshots=True, sources=True)\n        try:\n            # Login user\n            email1 = login_user(page, "t56826807+1734030556@gmail.com", "User", "One")\n            logout_user(page)\n\n            # Login second user.\n            email2 = login_user(page, "t56826807+1734030569@gmail.com", "User", "Two")\n\n            # Submit a new expense\n            create_button = page.locator(\n                'button[aria-label="Start chat (Floating action)"]'\n            )\n            create_button.click()\n\n            submit_expense_button = page.get_by_role("menuitem", name="Submit expense")\n            submit_expense_button.click()\n\n            # click Manual expense option\n            manual_expense_button = page.get_by_role("button", name="Manual")\n            manual_expense_button.click()\n\n            # Enter expense amount\n            page.get_by_placeholder("0").fill("100")\n            page.locator("#numPadContainerView").get_by_role("button", name="Next").click()\n\n            # Search user 1 to submit expense to.\n            page.get_by_test_id("selection-list-text-input").click()\n            page.get_by_test_id("selection-list-text-input").fill(email1)\n            try:\n                page.get_by_label("User One").click()\n            except:\n                page.get_by_label(email1).click()\n\n            # Enter description.\n            page.get_by_role("menuitem", name="Description").get_by_role("img").click()\n            page.get_by_role("textbox", name="What's it for?").fill("> hey")\n\n            # Verification step: Check to see if padding right is any non-zero value.\n            blockquote_element = page.locator('span[data-type="blockquote"]')\n            expect(blockquote_element).to_have_css("padding-right", "1px")\n        finally:\n            context.tracing.stop(path="/app/expensify/user_tool/output_browser1.zip")\n            trace_cleaner("/app/expensify/user_tool/output_browser1.zip")\n            browser.close()\n