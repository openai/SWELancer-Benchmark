diff --git a/src/components/VideoPlayerPreview/index.tsx b/src/components/VideoPlayerPreview/index.tsx
index fb188e59394..5f76ac5ed2f 100644
--- a/src/components/VideoPlayerPreview/index.tsx
+++ b/src/components/VideoPlayerPreview/index.tsx
@@ -1,17 +1,7 @@
-import type {VideoReadyForDisplayEvent} from 'expo-av';
+
 import React, {useEffect, useState} from 'react';
-import {View} from 'react-native';
-import type {GestureResponderEvent} from 'react-native';
 import * as Expensicons from '@components/Icon/Expensicons';
-import VideoPlayer from '@components/VideoPlayer';
-import IconButton from '@components/VideoPlayer/IconButton';
-import {usePlaybackContext} from '@components/VideoPlayerContexts/PlaybackContext';
-import useLocalize from '@hooks/useLocalize';
-import useResponsiveLayout from '@hooks/useResponsiveLayout';
-import useThemeStyles from '@hooks/useThemeStyles';
-import useThumbnailDimensions from '@hooks/useThumbnailDimensions';
-import VideoPlayerThumbnail from './VideoPlayerThumbnail';
-
+import { StyleSheet, View, Text, TouchableOpacity } from 'react-native';
 type VideoDimensions = {
     width: number;
     height: number;
@@ -43,70 +33,67 @@ type VideoPlayerPreviewProps = {
     isDeleted?: boolean;
 };
 
-function VideoPlayerPreview({videoUrl, thumbnailUrl, reportID, fileName, videoDimensions, videoDuration, onShowModalPress, isDeleted}: VideoPlayerPreviewProps) {
-    const styles = useThemeStyles();
-    const {translate} = useLocalize();
-    const {currentlyPlayingURL, currentlyPlayingURLReportID, updateCurrentlyPlayingURL} = usePlaybackContext();
-    const {shouldUseNarrowLayout} = useResponsiveLayout();
+function VideoPlayerPreview({videoUrl, thumbnailUrl, reportID, fileName, videoDimensions, onShowModalPress, isDeleted}: VideoPlayerPreviewProps) {
     const [isThumbnail, setIsThumbnail] = useState(true);
-    const [measuredDimensions, setMeasuredDimensions] = useState(videoDimensions);
-    const {thumbnailDimensionsStyles} = useThumbnailDimensions(measuredDimensions.width, measuredDimensions.height);
 
     // `onVideoLoaded` is passed to VideoPlayerPreview's `Video` element which is displayed only on web.
     // VideoReadyForDisplayEvent type is lacking srcElement, that's why it's added here
-    const onVideoLoaded = (event: VideoReadyForDisplayEvent & {srcElement: HTMLVideoElement}) => {
-        setMeasuredDimensions({width: event.srcElement.videoWidth, height: event.srcElement.videoHeight});
-    };
-
+    
     const handleOnPress = () => {
-        updateCurrentlyPlayingURL(videoUrl);
-        if (shouldUseNarrowLayout) {
-            onShowModalPress();
-        }
+        console.log('Download initiated for video: ' + fileName);
     };
 
     useEffect(() => {
-        if (videoUrl !== currentlyPlayingURL || reportID !== currentlyPlayingURLReportID) {
-            return;
-        }
-        setIsThumbnail(false);
-    }, [currentlyPlayingURL, currentlyPlayingURLReportID, updateCurrentlyPlayingURL, videoUrl, reportID]);
-
+        setIsThumbnail(true);
+    }, [videoUrl, reportID]);
+    
     return (
-        <View style={[styles.webViewStyles.tagStyles.video, thumbnailDimensionsStyles]}>
-            {shouldUseNarrowLayout || isThumbnail || isDeleted ? (
-                <VideoPlayerThumbnail
-                    thumbnailUrl={thumbnailUrl}
-                    onPress={handleOnPress}
-                    accessibilityLabel={fileName}
-                    isDeleted={isDeleted}
-                />
-            ) : (
-                <View style={styles.flex1}>
-                    <VideoPlayer
-                        url={videoUrl}
-                        onVideoLoaded={onVideoLoaded as (event: VideoReadyForDisplayEvent) => void}
-                        videoDuration={videoDuration}
-                        shouldUseSmallVideoControls
-                        style={[styles.w100, styles.h100]}
-                        isPreview
-                        videoPlayerStyle={styles.videoPlayerPreview}
-                    />
-                    <View style={[styles.pAbsolute, styles.w100]}>
-                        <IconButton
-                            src={Expensicons.Expand}
-                            style={[styles.videoExpandButton]}
-                            tooltipText={translate('videoPlayer.expand')}
-                            onPress={onShowModalPress}
-                            small
-                        />
-                    </View>
-                </View>
-            )}
-        </View>
-    );
+        <View style={styles.container}>
+            {/* Display the box with file name and download icon */}
+            <View style={styles.videoPlayerPreview}>
+                <Text style={styles.videoName}>{fileName}</Text>
+                <TouchableOpacity style={styles.downloadButton} onPress={handleOnPress}>
+                    <Expensicons.Download width={24} height={24} />
+                </TouchableOpacity>
+            </View>
+         </View>
+     );
 }
 
-VideoPlayerPreview.displayName = 'VideoPlayerPreview';
+const styles = StyleSheet.create({
+                container: {
+                    backgroundColor: '#fff',
+                    borderRadius: 8,
+                    overflow: 'hidden',
+                    justifyContent: 'center',
+                    alignItems: 'center',
+                    padding: 16, // Space around the box
+                },
+                // Box that replaces the video player
+                videoPlayerPreview: {
+                    backgroundColor: '#f0f0f0', // Light gray background
+                    borderRadius: 8, // Rounded corners for the box
+                    borderWidth: 1,
+                    borderColor: '#ccc', // Subtle border
+                    padding: 16, // Add padding
+                    alignItems: 'center', // Center content
+                    justifyContent: 'center', // Center content
+                    width: 200, // Fixed width for the box
+                    height: 120, // Fixed height for the box
+                },
+                // File name text styling
+                videoName: {
+                    fontSize: 14,
+                    color: '#333', // Dark text color
+                    marginBottom: 8, // Spacing below the name
+                    textAlign: 'center',
+                },
+                // Styling for the download button
+                downloadButton: {
+                    backgroundColor: '#007AFF', // Blue button background
+                    padding: 8, // Padding around the icon
+                    borderRadius: 20, // Round button
+                },
+            });
 
 export default VideoPlayerPreview;