diff --git a/src/pages/workspace/AccessOrNotFoundWrapper.tsx b/src/pages/workspace/AccessOrNotFoundWrapper.tsx
index 45bce8c2d1b..1dd280eb9b6 100644
--- a/src/pages/workspace/AccessOrNotFoundWrapper.tsx
+++ b/src/pages/workspace/AccessOrNotFoundWrapper.tsx
@@ -84,28 +84,50 @@ type AccessOrNotFoundWrapperProps = {
     allPolicies?: OnyxCollection<OnyxTypes.Policy>;
 } & Pick<FullPageNotFoundViewProps, 'subtitleKey' | 'onLinkPress'>;
 
+type AccessState = {
+    type: 'blocked' | 'feature_disabled' | 'accessible';
+    shouldShowFullScreen: boolean;
+};
+
 type PageNotFoundFallbackProps = Pick<AccessOrNotFoundWrapperProps, 'policyID' | 'fullPageNotFoundViewProps'> & {
-    isFeatureEnabled: boolean;
-    isPolicyNotAccessible: boolean;
+    accessState: AccessState;
     isMoneyRequest: boolean;
 };
 
-function PageNotFoundFallback({policyID, fullPageNotFoundViewProps, isFeatureEnabled, isPolicyNotAccessible, isMoneyRequest}: PageNotFoundFallbackProps) {
-    const shouldShowFullScreenFallback = !isFeatureEnabled || isPolicyNotAccessible;
+function getAccessState(isPolicyNotAccessible: boolean, isFeatureEnabled: boolean): AccessState {
+    if (isPolicyNotAccessible) {
+        return {
+            type: 'blocked',
+            shouldShowFullScreen: true
+        };
+    }
+    if (!isFeatureEnabled) {
+        return {
+            type: 'feature_disabled',
+            shouldShowFullScreen: true
+        };
+    }
+    return {
+        type: 'accessible',
+        shouldShowFullScreen: false
+    };
+}
+
+function PageNotFoundFallback({policyID, fullPageNotFoundViewProps, accessState, isMoneyRequest}: PageNotFoundFallbackProps) {
     const {shouldUseNarrowLayout} = useResponsiveLayout();
+    
     return (
         <NotFoundPage
-            shouldForceFullScreen={shouldShowFullScreenFallback}
+            shouldForceFullScreen={accessState.shouldShowFullScreen}
             onBackButtonPress={() => {
-                if (isPolicyNotAccessible) {
+                if (accessState.shouldShowFullScreen) {
                     Navigation.dismissModal();
                     return;
                 }
                 Navigation.goBack(policyID && !isMoneyRequest ? ROUTES.WORKSPACE_PROFILE.getRoute(policyID) : undefined);
             }}
-            // eslint-disable-next-line react/jsx-props-no-spreading
             {...fullPageNotFoundViewProps}
-            shouldShowBackButton={fullPageNotFoundViewProps?.shouldShowBackButton ?? (!shouldShowFullScreenFallback ? shouldUseNarrowLayout : undefined)}
+            shouldShowBackButton={fullPageNotFoundViewProps?.shouldShowBackButton ?? (!accessState.shouldShowFullScreen ? shouldUseNarrowLayout : undefined)}
         />
     );
 }
@@ -174,8 +196,7 @@ function AccessOrNotFoundWrapper({
             <PageNotFoundFallback
                 policyID={policyID}
                 isMoneyRequest={isMoneyRequest}
-                isFeatureEnabled={isFeatureEnabled}
-                isPolicyNotAccessible={isPolicyNotAccessible}
+                accessState={getAccessState(isPolicyNotAccessible, isFeatureEnabled)}
                 fullPageNotFoundViewProps={fullPageNotFoundViewProps}
             />
         );
