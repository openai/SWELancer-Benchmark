diff --git a/src/libs/Navigation/linkingConfig/getAdaptedStateFromPath.ts b/src/libs/Navigation/linkingConfig/getAdaptedStateFromPath.ts
index fce13143f3f..ef65f33f87f 100644
--- a/src/libs/Navigation/linkingConfig/getAdaptedStateFromPath.ts
+++ b/src/libs/Navigation/linkingConfig/getAdaptedStateFromPath.ts
@@ -118,9 +118,9 @@ function getMatchingRootRouteForRHPRoute(route: NavigationPartialRoute): Navigat
     if (route.params && 'backTo' in route.params && typeof route.params.backTo === 'string') {
         const stateForBackTo = getStateFromPath(route.params.backTo, config);
         if (stateForBackTo) {
-            // If there is rhpNavigator in the state generated for backTo url, we want to get root route matching to this rhp screen.
-            const rhpNavigator = stateForBackTo.routes.find((rt) => rt.name === NAVIGATORS.RIGHT_MODAL_NAVIGATOR);
-            if (rhpNavigator && rhpNavigator.state) {
+            // If there is lhpNavigator in the state generated for backTo url, we want to get root route matching to this lhp screen.
+            const lhpNavigator = stateForBackTo.routes.find((rt) => rt.name === NAVIGATORS.LEFT_MODAL_NAVIGATOR);
+            if (lhpNavigator && lhpNavigator.state) {
                 return getMatchingRootRouteForRHPRoute(findFocusedRoute(stateForBackTo) as NavigationPartialRoute);
             }
 
diff --git a/src/libs/Permissions.ts b/src/libs/Permissions.ts
index 24de2e61220..3bac8d97373 100644
--- a/src/libs/Permissions.ts
+++ b/src/libs/Permissions.ts
@@ -2,9 +2,14 @@ import type {OnyxEntry} from 'react-native-onyx';
 import CONST from '@src/CONST';
 import type {IOUType} from '@src/CONST';
 import type Beta from '@src/types/onyx/Beta';
+import * as Environment from './Environment/Environment';
+
+// function canUseAllBetas(betas: OnyxEntry<Beta[]>): boolean {
+//     return !!betas?.includes(CONST.BETAS.ALL);
+// }
 
 function canUseAllBetas(betas: OnyxEntry<Beta[]>): boolean {
-    return !!betas?.includes(CONST.BETAS.ALL);
+    return Environment.isDevelopment() || !!betas?.includes(CONST.BETAS.ALL);
 }
 
 function canUseDefaultRooms(betas: OnyxEntry<Beta[]>): boolean {
