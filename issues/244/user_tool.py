import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nfrom playwright.sync_api import Page, expect, sync_playwright\nfrom utils.trace_cleaner import trace_cleaner\n\nSITE_URL = "https://dev.new.expensify.com:8082/"\nPRIMARY_EMAIL = "expensifyolddot+1732950525@gmail.com"\nFIRST_NAME = "expensifyolddot"\nLAST_NAME = "1732950525"\n\ndef create_user(\n    page: Page, firstname: str, lastname: str\n):\n    # Sign up\n    page.get_by_test_id("username").fill(PRIMARY_EMAIL)\n    page.wait_for_timeout(1000)\n    page.get_by_role("button", name="Continue").click()\n    page.wait_for_timeout(1000)\n    page.get_by_role("button", name="Join").click()\n\n    # Update profile\n    if page.get_by_text("Track and budget expenses").is_visible():\n        page.get_by_text("Track and budget expenses").click()\n        page.get_by_role("textbox", name="First name").fill(firstname)\n        page.get_by_role("textbox", name="Last name").fill(lastname)\n        page.wait_for_timeout(1000)\n        page.get_by_role("button", name="Continue").click()\n\ndef close_button_if_present(page: Page):\n    """\n    Occasionally, there is a close button that prevents any clicks on the page as\n    it covers most of the screen. This button cannot be seen visually.\n    """\n    close_button = page.locator('button[aria-label="Close"]')\n    if close_button.is_visible():\n        close_button.click()\n\ndef test_error_message():\n\n    with sync_playwright() as p:\n\n        phone = p.devices["Galaxy S9+"]\n        browser = p.chromium.launch(\n            headless=True,\n            proxy={'server': 'http://127.0.0.1:8080'},\n            args=[\n                '--disable-web-security',\n                '--disable-features=IsolateOrigins,site-per-process',\n            ],\n        )\n        context = browser.new_context(**phone)\n\n        # Start tracing\n        context.tracing.start(screenshots=True, snapshots=True, sources=True)\n\n        try:\n            page = context.new_page()\n\n            page.goto(SITE_URL)\n\n            # create user\n            create_user(page, FIRST_NAME, LAST_NAME)\n            page.wait_for_timeout(1000)\n\n            # Enable default workspace\n            close_button_if_present(page)\n            page.get_by_label("My settings").click()\n            page.get_by_test_id("InitialSettingsPage").get_by_label("Workspaces").click()\n            page.get_by_label("New workspace").first.click()\n            page.get_by_label("Back").last.click()\n            page.get_by_label("Back").last.click()\n\n            # Enable taxes\n            close_button_if_present(page)\n            page.get_by_label("My settings").click()\n            page.get_by_test_id("InitialSettingsPage").get_by_label("Workspaces").click()\n            page.get_by_label("row").click()\n            page.get_by_label("More features").click()\n            page.get_by_label("Document and reclaim eligible").click()\n            page.wait_for_timeout(2000)\n\n            # Add tax-rate\n            page.get_by_label("Taxes").click()\n            page.get_by_role("button", name="Add rate").click()\n            page.get_by_role("menuitem", name="Name Required").click()\n            page.get_by_role("textbox", name="Name").fill("<h>")\n            page.get_by_test_id("TextSelectorModal").get_by_role(\n                "button", name="Save"\n            ).click()\n\n            # Expect an error message\n            expect(page.get_by_text("Invalid character")).to_be_visible()\n\n        except Exception as e:\n            # Reraise the exception but still allow the trace to be saved\n            raise e\n\n        finally:\n            # Stop and save the trace, then clean it\n            context.tracing.stop(path="/app/expensify/user_tool/output_browser1.zip")\n            trace_cleaner("/app/expensify/user_tool/output_browser1.zip")\n\n            context.close()\n            browser.close()\n