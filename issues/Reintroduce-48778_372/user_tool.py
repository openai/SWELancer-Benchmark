import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nfrom utils.trace_cleaner import trace_cleaner\n\n'''\nThe test assumes a manually created workspace with the approvers set up on 2 levels\nThe expense is also created manually to avoid duplicates and any unforseen issues\nHence the test basically assumes the role of the second approver and checks that the "Submit" exists or not\n'''\n\nfrom playwright._impl._page import Page\n\nimport pytest\n\nfrom utils.login import NEW_DOT_URL, check_if_logged_in\nfrom utils.browser import start_browser, close_browser\nfrom playwright.async_api import expect\n\nEMAIL = "brighturing926+311@gmail.com"\nEMAIL1 = "brighturing926+313@gmail.com"\nEMAIL2 = "brighturing926+314@gmail.com"\nworkspace_name = "zilmultiapprover23"\n\n@pytest.mark.asyncio\nasync def test_issue_48778() -> None:\n    # Start both browser contexts and begin tracing for each\n    context, page, playwright = await start_browser(\n        launch_args=[\n            "--ignore-certificate-errors",\n            "--disable-web-security",\n            "--disable-features=IsolateOrigins, site-per-process"\n        ]\n    )\n    await context.tracing.start(screenshots=True, snapshots=True)\n\n    context2, page2, playwright2 = await start_browser(\n        launch_args=[\n            "--ignore-certificate-errors",\n            "--disable-web-security",\n            "--disable-features=IsolateOrigins, site-per-process"\n        ]\n    )\n    await context2.tracing.start(screenshots=True, snapshots=True)\n\n    try:\n        # Step 1: Sign in\n        if await check_if_logged_in(page=page, url=NEW_DOT_URL) == False:\n            await page.get_by_test_id("username").fill(EMAIL)\n            await page.get_by_role("button", name="Continue").click()\n            my_otp = "123456"\n            await page.get_by_test_id("validateCode").fill(my_otp)\n\n            submitter_fname, submitter_lname = await get_names_for_existing_account(page)\n\n        # Setup 1st and 2nd approvers with delay\n        await page.get_by_label("My settings").click()\n        await page.get_by_test_id("InitialSettingsPage").get_by_label("Workspaces").click()\n        await page.get_by_text(workspace_name, exact=True).last.click()\n\n        await page.get_by_label("Back").click()\n        await page.get_by_label("Inbox").click()\n        await page.locator('div[data-testid="lhn-options-list"]').get_by_text(workspace_name).first.click()\n\n        # Submit expense\n        amount = str(1)\n        merchant = "G"\n\n        #######################################################################\n        # As the approver 2, navigate to the submitter's workspace chat\n        #######################################################################\n        # Second Aprover\n        if await check_if_logged_in(page=page2, url=NEW_DOT_URL) == False:\n            await page2.get_by_test_id("username").fill(EMAIL2)\n            await page2.get_by_role("button", name="Continue").click()\n            my_otp = "123456"\n            await page2.get_by_test_id("validateCode").fill(my_otp)\n            approver2_fname, approver2_lname = await get_names_for_existing_account(page2)\n        await page2.get_by_label("Inbox").click()\n        await page2.get_by_test_id("CustomBottomTabNavigator").get_by_label("Search").click()\n\n        _button_label = f"{merchant} {submitter_fname} {submitter_lname} {approver2_fname} {approver2_lname} ${amount}.00 View"\n        await page2.get_by_role("button", name=_button_label).click()\n\n        await page2.wait_for_timeout(5000)\n\n        ####################################################################################################\n        # Step 8: Verify that the 'submit' button should NOT be visible to second-level+ non-admin approvers.\n        #####################################################################################################\n\n        await expect(page2.get_by_role("button", name="Submit", exact=True)).not_to_be_visible()\n\n    finally:\n        # Stop and export traces, then clean them\n        await context.tracing.stop()\n        await context.tracing.export(path="/app/expensify/user_tool/output_browser1.zip")\n        trace_cleaner("/app/expensify/user_tool/output_browser1.zip")\n\n        await context2.tracing.stop()\n        await context2.tracing.export(path="/app/expensify/user_tool/output_browser2.zip")\n        trace_cleaner("/app/expensify/user_tool/output_browser2.zip")\n\n        # Close browsers\n        await close_browser(context, page, playwright)\n        await close_browser(context2, page2, playwright2)\n\nasync def get_names_for_existing_account(page: Page) -> tuple[str, str]:\n    '''\n    Retrive first and last name from the account profile\n    '''\n    await page.get_by_label("My settings").click()\n    try:\n        await page.get_by_label("Close").click(timeout=1000)\n    except Exception:\n        pass\n    await page.get_by_role("menuitem", name="Profile").click()\n    await page.get_by_text("Display name").last.click()\n    f_name = await page.get_by_role("textbox", name="First name").input_value()\n    l_name = await page.get_by_role("textbox", name="Last name").input_value()\n    await page.wait_for_timeout(2000)\n    await page.keyboard.down("Escape")\n\n    return f_name, l_name\n