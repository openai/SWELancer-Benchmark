import sys, os\n\nbase_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, base_path)\n\nfrom playwright.sync_api import sync_playwright, expect\nfrom playwright.sync_api._context_manager import PlaywrightContextManager\nfrom playwright._impl._browser import Browser\nfrom playwright._impl._page import Page\nfrom utils.trace_cleaner import trace_cleaner\n\ndef login_user(p: PlaywrightContextManager, first_name="Milan", last_name="T") -> tuple[Browser, Page, str]:\n    # Launch Chromium browser and open a new page\n    browser = p.chromium.launch(headless=True, args=[\n            "--disable-web-security",\n            "--disable-features=IsolateOrigins,site-per-process"\n        ])\n    page = browser.new_page()\n    user_email = "freelanceapptest+1733261135@gmail.com"\n\n    # Step 1: Open expensify url\n    page.goto('https://dev.new.expensify.com:8082/') \n\n    # Step 2: Enter email and click continue\n    page.locator('input[type="email"]').fill(user_email)\n    page.locator('button[tabindex="0"]').click()\n    page.wait_for_timeout(1000)\n\n    # Step 3: Click join button\n    try:\n        page.locator('button[tabindex="0"]').click()\n        page.wait_for_timeout(1000)\n    except Exception:\n        pass\n    expect(page.locator("text=What do you want to do today?")).to_be_visible()\n\n    # Step 4: Select 'Track and budget expenses' in onobarding page and click Continue\n    page.locator("text='Track and budget expenses'").click()\n    page.get_by_role("button", name="Continue").click()\n    page.wait_for_timeout(1000)\n\n    # Step 5: Enter first name, last name and click continue\n    page.locator('input[name="fname"]').fill(first_name)\n    page.locator('input[name="lname"]').fill(last_name)\n    page.get_by_role("button", name="Continue").last.click()\n    page.wait_for_timeout(1000)\n\n    return browser, page, user_email\n\ndef open_submit_expense_and_click_on_next_button(\n    browser: Browser, \n    page: Page, \n    user_email: str, \n) -> tuple[Browser, Page, str]:\n    plus_icon = page.locator('button[aria-label="Start chat (Floating action)"]')\n    expect(plus_icon).to_be_visible()\n    plus_icon.click()\n    page.wait_for_timeout(1000)\n\n    new_workspace_button = page.locator('div[aria-label="Submit expense"]')\n    expect(new_workspace_button).to_be_visible()\n    new_workspace_button.click()\n    page.wait_for_timeout(1000)\n\n    manual_button = page.locator('button[aria-label="Manual"]')\n    expect(manual_button).to_be_visible()\n    manual_button.click()\n    page.wait_for_timeout(1000)\n\n    next_button = page.locator('button[data-tag="pressable"]', has_text='Next').last\n    expect(next_button).to_be_visible()\n    next_button.click()\n    page.wait_for_timeout(2000)\n\n    return browser, page, user_email\n\ndef test_error_message_top_margin():\n    trace_path = "/app/expensify/user_tool/output_browser1.zip"\n    with sync_playwright() as p:\n        browser, page, user_email = login_user(p)\n        try:\n            # Start tracing\n            page.context.tracing.start(screenshots=True, snapshots=True, sources=True)\n\n            # Step 1: Open submit expense RHN\n            browser, page, user_email = open_submit_expense_and_click_on_next_button(browser, page, user_email)\n\n            # Step 2: A next button with 12px top margin should be visible below the error message\n            next_button = page.locator('div[style="opacity: 1; border-radius: 100px; width: 100%; margin-top: 20px;"]', has_text='Next').last\n            expect(next_button).not_to_be_visible()\n            page.wait_for_timeout(1000)\n\n            next_button = page.locator('div[style="opacity: 1; border-radius: 100px; width: 100%; margin-top: 12px;"]', has_text='Next').last\n            expect(next_button).to_be_visible()\n            page.wait_for_timeout(1000)\n\n        except Exception as e:\n            # Reraise so the test fails, but still ensure trace is exported\n            raise e\n        finally:\n            # Stop and export trace, then clean it\n            page.context.tracing.stop()\n            page.context.tracing.export(path=trace_path)\n            trace_cleaner(trace_path)\n            browser.close()\n